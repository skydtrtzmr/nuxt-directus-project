{
  "openapi": "3.0.1",
  "info": {
    "title": "Dynamic API Specification",
    "description": "This is a dynamically generated API specification for all endpoints existing on the current project.",
    "version": "11.6.1"
  },
  "servers": [
    {
      "url": "127.0.0.1:8056",
      "description": "Your current Directus instance."
    }
  ],
  "paths": {
    "/assets/{id}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "operationId": "getAsset",
        "summary": "Get an Asset",
        "description": "Image typed files can be dynamically resized and transformed to fit any need.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "The key of the asset size configured in settings.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transforms",
            "in": "query",
            "description": "A JSON array of image transformations",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "download",
            "in": "query",
            "description": "Download the asset to your computer",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Retrieve a Temporary Access Token",
        "description": "Retrieve a Temporary Access Token",
        "tags": [
          "Authentication"
        ],
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "admin@example.com",
                    "description": "Email address of the user you're retrieving the access token for."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the user.",
                    "format": "password",
                    "example": "password"
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "json",
                      "cookie",
                      "session"
                    ],
                    "default": "json",
                    "description": "Whether to retrieve the refresh token in the JSON response, or in a httpOnly cookie."
                  },
                  "otp": {
                    "type": "string",
                    "description": "The user's one-time-password (if MFA is enabled)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "example": "eyJhbGciOiJI..."
                        },
                        "expires": {
                          "type": "integer",
                          "example": 900
                        },
                        "refresh_token": {
                          "type": "string",
                          "example": "yuOJkjdPXMd..."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh Token",
        "description": "Refresh a Temporary Access Token.",
        "tags": [
          "Authentication"
        ],
        "operationId": "refresh",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV...",
                    "description": "JWT access token you want to refresh. This token can't be expired."
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "json",
                      "cookie",
                      "session"
                    ],
                    "default": "json",
                    "description": "Whether to submit and retrieve the refresh token in the JSON response, or in a httpOnly cookie."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "example": "eyJhbGciOiJI..."
                        },
                        "expires": {
                          "type": "integer",
                          "example": 900
                        },
                        "refresh_token": {
                          "type": "string",
                          "example": "Gy-caJMpmGTA..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Log Out",
        "description": "Log Out",
        "tags": [
          "Authentication"
        ],
        "operationId": "logout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV...",
                    "description": "The refresh token to invalidate. If you have the refresh token in a cookie through /auth/login, you don't have to submit it here."
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "json",
                      "cookie",
                      "session"
                    ],
                    "description": "Whether the refresh token is submitted in the JSON response, or in a httpOnly cookie."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request successful"
          }
        }
      }
    },
    "/auth/password/request": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "operationId": "passwordRequest",
        "summary": "Request a Password Reset",
        "description": "Request a reset password email to be send.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "admin@example.com",
                    "description": "Email address of the user you're requesting a reset for."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/password/reset": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "operationId": "passwordReset",
        "summary": "Reset a Password",
        "description": "The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV1Qi...",
                    "description": "One-time use JWT token that is used to verify the user."
                  },
                  "password": {
                    "type": "string",
                    "example": "password",
                    "format": "password",
                    "description": "New password for the user."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/oauth": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "operationId": "oauth",
        "summary": "List OAuth Providers",
        "description": "List configured OAuth providers.",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "example": [
                        "github",
                        "facebook"
                      ],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/oauth/{provider}": {
      "get": {
        "summary": "Authenticated using an OAuth provider",
        "description": "Start OAuth flow using the specified provider",
        "tags": [
          "Authentication"
        ],
        "operationId": "oauthProvider",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "Key of the activated OAuth provider.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect",
            "in": "query",
            "required": false,
            "description": "Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/schema/snapshot": {
      "get": {
        "summary": "Retrieve Schema Snapshot",
        "description": "Retrieve the current schema. This endpoint is only available to admin users.",
        "operationId": "schemaSnapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/Export"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Schema"
                    }
                  }
                }
              },
              "text/yaml": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Schema"
        ]
      }
    },
    "/schema/apply": {
      "post": {
        "summary": "Apply Schema Difference",
        "description": "Update the instance's schema by passing the diff previously retrieved via `/schema/diff` endpoint in the JSON request body or a JSON/YAML file. This endpoint is only available to admin users.",
        "operationId": "schemaApply",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Diff"
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful request"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Schema"
        ]
      }
    },
    "/schema/diff": {
      "post": {
        "summary": "Retrieve Schema Difference",
        "description": "Compare the current instance's schema against the schema snapshot in JSON request body or a JSON/YAML file and retrieve the difference. This endpoint is only available to admin users.",
        "operationId": "schemaDiff",
        "parameters": [
          {
            "name": "force",
            "description": "Bypass version and database vendor restrictions.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Schema"
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Diff"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No schema difference."
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Schema"
        ]
      }
    },
    "/server/info": {
      "get": {
        "summary": "System Info",
        "description": "Perform a system status check and return the options.",
        "operationId": "serverInfo",
        "parameters": [
          {
            "description": "The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server.",
            "in": "query",
            "name": "super_admin_token",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Server"
        ]
      }
    },
    "/server/ping": {
      "get": {
        "summary": "Ping",
        "description": "Ping, pong. Ping.. pong.",
        "operationId": "ping",
        "responses": {
          "200": {
            "content": {
              "application/text": {
                "schema": {
                  "type": "string",
                  "pattern": "pong",
                  "example": "pong"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": [
          "Server"
        ]
      }
    },
    "/utils/hash/generate": {
      "post": {
        "summary": "Hash a string",
        "description": "Generate a hash for a given string.",
        "operationId": "hash-generate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "string": {
                    "description": "String to hash.",
                    "type": "string"
                  }
                },
                "required": [
                  "string"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "$argon2i$v=19$m=4096,t=3,p=1$pOyIa/zmRAjCVLb2f7kOyg$DasoO6LzMM+6iKfzCDq6JbsYsZWLSm33p7i9NxL9mDc"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/hash/verify": {
      "post": {
        "summary": "Hash a string",
        "description": "Generate a hash for a given string.",
        "operationId": "hash-verify",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "string": {
                    "description": "String to hash.",
                    "type": "string"
                  },
                  "hash": {
                    "description": "Hash you want to verify against.",
                    "type": "string"
                  }
                },
                "required": [
                  "string",
                  "hash"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/sort/{collection}": {
      "post": {
        "summary": "Sort Items",
        "description": "Re-sort items in collection based on start and to value of item",
        "operationId": "sort",
        "parameters": [
          {
            "description": "Collection identifier",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "item": {
                    "description": "Primary key of item to move",
                    "type": "number"
                  },
                  "to": {
                    "description": "Primary key of item where to move the current item to",
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/import/{collection}": {
      "post": {
        "summary": "Import Items",
        "description": "Import multiple records from a JSON or CSV file into a collection.",
        "operationId": "import",
        "parameters": [
          {
            "description": "Collection identifier",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/export/{collection}": {
      "post": {
        "summary": "Export Items",
        "description": "Export a larger data set to a file in the File Library",
        "operationId": "export",
        "parameters": [
          {
            "description": "Collection identifier",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "format": {
                    "description": "What file format to save the export to. One of csv, xml, json",
                    "type": "string",
                    "enum": [
                      "csv",
                      "xml",
                      "json"
                    ]
                  },
                  "query": {
                    "$ref": "#/components/schemas/Query"
                  },
                  "file": {
                    "$ref": "#/components/schemas/Files"
                  }
                },
                "required": [
                  "format",
                  "query",
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/cache/clear": {
      "post": {
        "summary": "Clear Cache",
        "description": "Resets both the data and schema cache of Directus.",
        "operationId": "clear-cache",
        "responses": {
          "200": {
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/random/string": {
      "get": {
        "summary": "Get a Random String",
        "description": "Returns a random string of given length.",
        "operationId": "random",
        "parameters": [
          {
            "description": "Length of the random string.",
            "in": "query",
            "name": "length",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "1>M3+4oh.S"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/roles": {
      "get": {
        "summary": "List Roles",
        "description": "List the roles.",
        "operationId": "getRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Roles"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "summary": "Create a Role",
        "description": "Create a new role.",
        "operationId": "createRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Description of the role.",
                    "type": "string"
                  },
                  "enforce_tfa": {
                    "description": "Whether or not this role enforces the use of 2FA.",
                    "type": "boolean"
                  },
                  "external_id": {
                    "description": "ID used with external services in SCIM.",
                    "type": "string"
                  },
                  "ip_access": {
                    "description": "Array of IP addresses that are allowed to connect to the API as a user of this role.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "module_listing": {
                    "description": "Custom override for the admin app module bar navigation.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "type": "string",
                    "example": "Interns"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "patch": {
        "summary": "Update Multiple Roles",
        "description": "Update multiple roles at the same time.",
        "tags": [
          "Roles"
        ],
        "operationId": "updateRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "description": {
                        "description": "Description of the role.",
                        "type": "string"
                      },
                      "enforce_tfa": {
                        "description": "Whether or not this role enforces the use of 2FA.",
                        "type": "boolean"
                      },
                      "external_id": {
                        "description": "ID used with external services in SCIM.",
                        "type": "string"
                      },
                      "ip_access": {
                        "description": "Array of IP addresses that are allowed to connect to the API as a user of this role.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "module_listing": {
                        "description": "Custom override for the admin app module bar navigation.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the role.",
                        "type": "string",
                        "example": "Interns"
                      }
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Roles"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Roles",
        "description": "Delete multiple existing roles.",
        "tags": [
          "Roles"
        ],
        "operationId": "deleteRoles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/roles/{id}": {
      "get": {
        "summary": "Retrieve a Role",
        "description": "Retrieve a single role by unique identifier.",
        "operationId": "getRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "patch": {
        "summary": "Update a Role",
        "description": "Update an existing role",
        "operationId": "updateRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Description of the role.",
                    "type": "string"
                  },
                  "enforce_tfa": {
                    "description": "Whether or not this role enforces the use of 2FA.",
                    "type": "boolean"
                  },
                  "external_id": {
                    "description": "ID used with external services in SCIM.",
                    "type": "string"
                  },
                  "ip_access": {
                    "description": "Array of IP addresses that are allowed to connect to the API as a user of this role.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "module_listing": {
                    "description": "Custom override for the admin app module bar navigation.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the role.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "delete": {
        "summary": "Delete a Role",
        "description": "Delete an existing role",
        "operationId": "deleteRole",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/revisions": {
      "get": {
        "summary": "List Revisions",
        "description": "List the revisions.",
        "operationId": "getRevisions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Revisions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Revisions"
        ]
      }
    },
    "/revisions/{id}": {
      "get": {
        "summary": "Retrieve a Revision",
        "description": "Retrieve a single revision by unique identifier.",
        "operationId": "getRevision",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Revisions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Revisions"
        ]
      }
    },
    "/folders": {
      "get": {
        "summary": "List Folders",
        "description": "List the folders.",
        "operationId": "getFolders",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Folders"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "post": {
        "summary": "Create a Folder",
        "description": "Create a new folder.",
        "operationId": "createFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Amsterdam",
                    "description": "Name of the folder."
                  },
                  "parent": {
                    "description": "Unique identifier of the parent folder. This allows for nested folders.",
                    "type": "integer"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Folders"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "patch": {
        "summary": "Update Multiple Folders",
        "description": "Update multiple folders at the same time.",
        "tags": [
          "Folders"
        ],
        "operationId": "updateFolders",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "Amsterdam",
                        "description": "Name of the folder."
                      },
                      "parent": {
                        "description": "Unique identifier of the parent folder. This allows for nested folders.",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "name"
                    ]
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Folders"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Folders",
        "description": "Delete multiple existing folders.",
        "tags": [
          "Folders"
        ],
        "operationId": "deleteFolders",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/folders/{id}": {
      "get": {
        "summary": "Retrieve a Folder",
        "description": "Retrieve a single folder by unique identifier.",
        "operationId": "getFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Folders"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "patch": {
        "summary": "Update a Folder",
        "description": "Update an existing folder",
        "operationId": "updateFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the folder. Can't be null or empty."
                  },
                  "parent": {
                    "type": "integer",
                    "example": 3,
                    "description": "Unique identifier of the parent folder. This allows for nested folders."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Folders"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "delete": {
        "summary": "Delete a Folder",
        "description": "Delete an existing folder",
        "operationId": "deleteFolder",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/activity": {
      "get": {
        "operationId": "getActivities",
        "summary": "List Activity Actions",
        "description": "Returns a list of activity actions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Activity"
        ]
      }
    },
    "/activity/{id}": {
      "get": {
        "summary": "Retrieve an Activity Action",
        "description": "Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information.",
        "operationId": "getActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Activity"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Activity"
        ]
      }
    },
    "/fields": {
      "get": {
        "summary": "List All Fields",
        "description": "Returns a list of the fields available in the project.",
        "operationId": "getFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Fields"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ]
      }
    },
    "/fields/{collection}": {
      "get": {
        "summary": "List Fields in Collection",
        "description": "Returns a list of the fields available in the given collection.",
        "operationId": "getCollectionFields",
        "parameters": [
          {
            "description": "Unique identifier of the collection the item resides in.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Fields"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ]
      },
      "post": {
        "summary": "Create Field in Collection",
        "description": "Create a new field in a given collection.",
        "operationId": "createField",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "field",
                  "datatype",
                  "type",
                  "length"
                ],
                "type": "object",
                "properties": {
                  "field": {
                    "description": "Unique name of the field. Field name is unique within the collection.",
                    "example": "id",
                    "type": "string"
                  },
                  "type": {
                    "description": "Directus specific data type. Used to cast values in the API.",
                    "example": "integer",
                    "type": "string"
                  },
                  "schema": {
                    "description": "The schema info.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the field.",
                        "example": "title",
                        "type": "string"
                      },
                      "table": {
                        "description": "The collection of the field.",
                        "example": "posts",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of the field.",
                        "example": "string",
                        "type": "string"
                      },
                      "default_value": {
                        "description": "The default value of the field.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "max_length": {
                        "description": "The max length of the field.",
                        "example": null,
                        "type": "integer",
                        "nullable": true
                      },
                      "is_nullable": {
                        "description": "If the field is nullable.",
                        "example": false,
                        "type": "boolean"
                      },
                      "is_primary_key": {
                        "description": "If the field is primary key.",
                        "example": false,
                        "type": "boolean"
                      },
                      "has_auto_increment": {
                        "description": "If the field has auto increment.",
                        "example": false,
                        "type": "boolean"
                      },
                      "foreign_key_column": {
                        "description": "Related column from the foreign key constraint.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "foreign_key_table": {
                        "description": "Related table from the foreign key constraint.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "comment": {
                        "description": "Comment as saved in the database.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "schema": {
                        "description": "Database schema (pg only).",
                        "example": "public",
                        "type": "string"
                      },
                      "foreign_key_schema": {
                        "description": "Related schema from the foreign key constraint (pg only).",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      }
                    }
                  },
                  "meta": {
                    "description": "The meta info.",
                    "type": "object",
                    "nullable": true,
                    "properties": {
                      "id": {
                        "description": "Unique identifier for the field in the `directus_fields` collection.",
                        "example": 3,
                        "type": "integer"
                      },
                      "collection": {
                        "description": "Unique name of the collection this field is in.",
                        "example": "posts",
                        "type": "string"
                      },
                      "field": {
                        "description": "Unique name of the field. Field name is unique within the collection.",
                        "example": "title",
                        "type": "string"
                      },
                      "special": {
                        "description": "Transformation flag for field",
                        "example": null,
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true
                      },
                      "system-interface": {
                        "description": "What interface is used in the admin app to edit the value for this field.",
                        "example": "primary-key",
                        "type": "string",
                        "nullable": true
                      },
                      "options": {
                        "description": "Options for the interface that's used. This format is based on the individual interface.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "display": {
                        "description": "What display is used in the admin app to display the value for this field.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "display_options": {
                        "description": "Options for the display that's used. This format is based on the individual display.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "locked": {
                        "description": "If the field can be altered by the end user. Directus system fields have this value set to `true`.",
                        "example": true,
                        "type": "boolean"
                      },
                      "readonly": {
                        "description": "Prevents the user from editing the value in the field.",
                        "example": false,
                        "type": "boolean"
                      },
                      "hidden": {
                        "description": "If this field should be hidden.",
                        "example": true,
                        "type": "boolean"
                      },
                      "sort": {
                        "description": "Sort order of this field on the edit page of the admin app.",
                        "example": 1,
                        "type": "integer",
                        "nullable": true
                      },
                      "width": {
                        "description": "Width of the field on the edit form.",
                        "example": null,
                        "type": "string",
                        "nullable": true,
                        "enum": [
                          "half",
                          "half-left",
                          "half-right",
                          "full",
                          "fill",
                          null
                        ]
                      },
                      "group": {
                        "description": "What field group this field is part of.",
                        "example": null,
                        "type": "integer",
                        "nullable": true
                      },
                      "translation": {
                        "description": "Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "note": {
                        "description": "A user provided note for the field. Will be rendered alongside the interface on the edit page.",
                        "example": "",
                        "type": "string",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Fields"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ],
        "parameters": [
          {
            "description": "Unique identifier of the collection the item resides in.",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/fields/{collection}/{id}": {
      "get": {
        "summary": "Retrieve a Field",
        "description": "Retrieves the details of a single field in a given collection.",
        "operationId": "getCollectionField",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Fields"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "description": "Unique identifier of the collection the item resides in.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the field.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      },
      "patch": {
        "summary": "Update a Field",
        "description": "Update an existing field.",
        "operationId": "updateField",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "field": {
                    "description": "Unique name of the field. Field name is unique within the collection.",
                    "example": "id",
                    "type": "string"
                  },
                  "type": {
                    "description": "Directus specific data type. Used to cast values in the API.",
                    "example": "integer",
                    "type": "string"
                  },
                  "schema": {
                    "description": "The schema info.",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the field.",
                        "example": "title",
                        "type": "string"
                      },
                      "table": {
                        "description": "The collection of the field.",
                        "example": "posts",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of the field.",
                        "example": "string",
                        "type": "string"
                      },
                      "default_value": {
                        "description": "The default value of the field.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "max_length": {
                        "description": "The max length of the field.",
                        "example": null,
                        "type": "integer",
                        "nullable": true
                      },
                      "is_nullable": {
                        "description": "If the field is nullable.",
                        "example": false,
                        "type": "boolean"
                      },
                      "is_primary_key": {
                        "description": "If the field is primary key.",
                        "example": false,
                        "type": "boolean"
                      },
                      "has_auto_increment": {
                        "description": "If the field has auto increment.",
                        "example": false,
                        "type": "boolean"
                      },
                      "foreign_key_column": {
                        "description": "Related column from the foreign key constraint.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "foreign_key_table": {
                        "description": "Related table from the foreign key constraint.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "comment": {
                        "description": "Comment as saved in the database.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "schema": {
                        "description": "Database schema (pg only).",
                        "example": "public",
                        "type": "string"
                      },
                      "foreign_key_schema": {
                        "description": "Related schema from the foreign key constraint (pg only).",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      }
                    }
                  },
                  "meta": {
                    "description": "The meta info.",
                    "type": "object",
                    "nullable": true,
                    "properties": {
                      "id": {
                        "description": "Unique identifier for the field in the `directus_fields` collection.",
                        "example": 3,
                        "type": "integer"
                      },
                      "collection": {
                        "description": "Unique name of the collection this field is in.",
                        "example": "posts",
                        "type": "string"
                      },
                      "field": {
                        "description": "Unique name of the field. Field name is unique within the collection.",
                        "example": "title",
                        "type": "string"
                      },
                      "special": {
                        "description": "Transformation flag for field",
                        "example": null,
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true
                      },
                      "system-interface": {
                        "description": "What interface is used in the admin app to edit the value for this field.",
                        "example": "primary-key",
                        "type": "string",
                        "nullable": true
                      },
                      "options": {
                        "description": "Options for the interface that's used. This format is based on the individual interface.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "display": {
                        "description": "What display is used in the admin app to display the value for this field.",
                        "example": null,
                        "type": "string",
                        "nullable": true
                      },
                      "display_options": {
                        "description": "Options for the display that's used. This format is based on the individual display.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "locked": {
                        "description": "If the field can be altered by the end user. Directus system fields have this value set to `true`.",
                        "example": true,
                        "type": "boolean"
                      },
                      "readonly": {
                        "description": "Prevents the user from editing the value in the field.",
                        "example": false,
                        "type": "boolean"
                      },
                      "hidden": {
                        "description": "If this field should be hidden.",
                        "example": true,
                        "type": "boolean"
                      },
                      "sort": {
                        "description": "Sort order of this field on the edit page of the admin app.",
                        "example": 1,
                        "type": "integer",
                        "nullable": true
                      },
                      "width": {
                        "description": "Width of the field on the edit form.",
                        "example": null,
                        "type": "string",
                        "nullable": true,
                        "enum": [
                          "half",
                          "half-left",
                          "half-right",
                          "full",
                          "fill",
                          null
                        ]
                      },
                      "group": {
                        "description": "What field group this field is part of.",
                        "example": null,
                        "type": "integer",
                        "nullable": true
                      },
                      "translation": {
                        "description": "Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.",
                        "example": null,
                        "type": "object",
                        "nullable": true
                      },
                      "note": {
                        "description": "A user provided note for the field. Will be rendered alongside the interface on the edit page.",
                        "example": "",
                        "type": "string",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Fields"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "description": "Unique identifier of the collection the item resides in.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the field.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      },
      "delete": {
        "summary": "Delete a Field",
        "description": "Delete an existing field.",
        "operationId": "deleteField",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ],
        "parameters": [
          {
            "name": "collection",
            "in": "path",
            "description": "Unique identifier of the collection the item resides in.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier of the field.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      }
    },
    "/files": {
      "get": {
        "summary": "List Files",
        "description": "List the files.",
        "tags": [
          "Files"
        ],
        "operationId": "getFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Files"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Create a File",
        "description": "Create a new file",
        "tags": [
          "Files"
        ],
        "operationId": "createFile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Files"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Files",
        "description": "Update multiple files at the same time.",
        "tags": [
          "Files"
        ],
        "operationId": "updateFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Files"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Files",
        "description": "Delete multiple existing files.",
        "tags": [
          "Files"
        ],
        "operationId": "deleteFiles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/files/{id}": {
      "get": {
        "summary": "Retrieve a Files",
        "description": "Retrieve a single file by unique identifier.",
        "tags": [
          "Files"
        ],
        "operationId": "getFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Files"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update a File",
        "description": "Update an existing file, and/or replace it's file contents.",
        "tags": [
          "Files"
        ],
        "operationId": "updateFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "title": {
                    "description": "Title for the file. Is extracted from the filename on upload, but can be edited by the user.",
                    "example": "User Avatar",
                    "type": "string"
                  },
                  "filename_download": {
                    "description": "Preferred filename when file is downloaded.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description for the file.",
                    "type": "string",
                    "nullable": true
                  },
                  "folder": {
                    "description": "Virtual folder where this file resides in.",
                    "example": null,
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/Folders"
                      }
                    ],
                    "nullable": true
                  },
                  "tags": {
                    "description": "Tags for the file. Is automatically populated based on Exif data for images.",
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "string"
                    }
                  },
                  "file": {
                    "description": "File contents.",
                    "format": "binary"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "Title for the file. Is extracted from the filename on upload, but can be edited by the user.",
                    "example": "User Avatar",
                    "type": "string"
                  },
                  "filename_download": {
                    "description": "Preferred filename when file is downloaded.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description for the file.",
                    "type": "string",
                    "nullable": true
                  },
                  "folder": {
                    "description": "Virtual folder where this file resides in.",
                    "example": null,
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/components/schemas/Folders"
                      }
                    ],
                    "nullable": true
                  },
                  "tags": {
                    "description": "Tags for the file. Is automatically populated based on Exif data for images.",
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Files"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete a File",
        "description": "Delete an existing file.",
        "tags": [
          "Files"
        ],
        "operationId": "deleteFile",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/settings": {
      "get": {
        "summary": "Retrieve Settings",
        "description": "List the settings.",
        "operationId": "getSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Settings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Settings"
        ]
      },
      "patch": {
        "summary": "Update Settings",
        "description": "Update the settings",
        "operationId": "updateSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Settings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Settings"
        ]
      }
    },
    "/permissions": {
      "get": {
        "summary": "List Permissions",
        "description": "List all permissions.",
        "operationId": "getPermissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permissions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      },
      "post": {
        "summary": "Create a Permission",
        "description": "Create a new permission.",
        "operationId": "createPermission",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collection": {
                    "description": "What collection this permission applies to.",
                    "type": "string",
                    "example": "customers"
                  },
                  "comment": {
                    "description": "If the user can post comments.",
                    "type": "string",
                    "enum": [
                      "none",
                      "create",
                      "update",
                      "full"
                    ]
                  },
                  "create": {
                    "description": "If the user can create items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "full"
                    ]
                  },
                  "delete": {
                    "description": "If the user can update items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "explain": {
                    "description": "If the user is required to leave a comment explaining what was changed.",
                    "type": "string",
                    "enum": [
                      "none",
                      "create",
                      "update",
                      "always"
                    ]
                  },
                  "read": {
                    "description": "If the user can read items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "role": {
                    "description": "Unique identifier of the role this permission applies to.",
                    "type": "integer",
                    "example": 3
                  },
                  "read_field_blacklist": {
                    "description": "Explicitly denies read access for specific fields.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "featured_image"
                    ]
                  },
                  "status": {
                    "description": "What status this permission applies to.",
                    "type": "string"
                  },
                  "status_blacklist": {
                    "description": "Explicitly denies specific statuses to be used.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "update": {
                    "description": "If the user can update items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "write_field_blacklist": {
                    "description": "Explicitly denies write access for specific fields.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Permissions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      },
      "patch": {
        "summary": "Update Multiple Permissions",
        "description": "Update multiple permissions at the same time.",
        "tags": [
          "Permissions"
        ],
        "operationId": "updatePermissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data": {
                    "properties": {
                      "collection": {
                        "description": "What collection this permission applies to.",
                        "type": "string",
                        "example": "customers"
                      },
                      "comment": {
                        "description": "If the user can post comments.",
                        "type": "string",
                        "enum": [
                          "none",
                          "create",
                          "update",
                          "full"
                        ]
                      },
                      "create": {
                        "description": "If the user can create items.",
                        "type": "string",
                        "enum": [
                          "none",
                          "full"
                        ]
                      },
                      "delete": {
                        "description": "If the user can update items.",
                        "type": "string",
                        "enum": [
                          "none",
                          "mine",
                          "role",
                          "full"
                        ]
                      },
                      "explain": {
                        "description": "If the user is required to leave a comment explaining what was changed.",
                        "type": "string",
                        "enum": [
                          "none",
                          "create",
                          "update",
                          "always"
                        ]
                      },
                      "read": {
                        "description": "If the user can read items.",
                        "type": "string",
                        "enum": [
                          "none",
                          "mine",
                          "role",
                          "full"
                        ]
                      },
                      "role": {
                        "description": "Unique identifier of the role this permission applies to.",
                        "type": "integer",
                        "example": 3
                      },
                      "read_field_blacklist": {
                        "description": "Explicitly denies read access for specific fields.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "featured_image"
                        ]
                      },
                      "status": {
                        "description": "What status this permission applies to.",
                        "type": "string"
                      },
                      "status_blacklist": {
                        "description": "Explicitly denies specific statuses to be used.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "update": {
                        "description": "If the user can update items.",
                        "type": "string",
                        "enum": [
                          "none",
                          "mine",
                          "role",
                          "full"
                        ]
                      },
                      "write_field_blacklist": {
                        "description": "Explicitly denies write access for specific fields.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permissions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Permissions",
        "description": "Delete multiple existing permissions.",
        "tags": [
          "Permissions"
        ],
        "operationId": "deletePermissions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/permissions/me": {
      "get": {
        "summary": "List My Permissions",
        "description": "List the permissions that apply to the current user.",
        "operationId": "getMyPermissions",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      }
    },
    "/permissions/{id}": {
      "get": {
        "summary": "Retrieve a Permission",
        "description": "Retrieve a single permissions object by unique identifier.",
        "operationId": "getPermission",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Permissions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      },
      "patch": {
        "summary": "Update a Permission",
        "description": "Update an existing permission",
        "operationId": "updatePermission",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collection": {
                    "description": "What collection this permission applies to.",
                    "type": "object"
                  },
                  "comment": {
                    "description": "If the user can post comments. `full`.",
                    "type": "string",
                    "enum": [
                      "none",
                      "create",
                      "update"
                    ]
                  },
                  "create": {
                    "description": "If the user can create items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "full"
                    ]
                  },
                  "delete": {
                    "description": "If the user can update items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "explain": {
                    "description": "If the user is required to leave a comment explaining what was changed.",
                    "type": "string",
                    "enum": [
                      "none",
                      "create",
                      "update",
                      "always"
                    ]
                  },
                  "read": {
                    "description": "If the user can read items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "read_field_blacklist": {
                    "description": "Explicitly denies read access for specific fields.",
                    "type": "object"
                  },
                  "role": {
                    "description": "Unique identifier of the role this permission applies to.",
                    "type": "object"
                  },
                  "status": {
                    "description": "What status this permission applies to.",
                    "type": "object"
                  },
                  "status_blacklist": {
                    "description": "Explicitly denies specific statuses to be used.",
                    "type": "object"
                  },
                  "update": {
                    "description": "If the user can update items.",
                    "type": "string",
                    "enum": [
                      "none",
                      "mine",
                      "role",
                      "full"
                    ]
                  },
                  "write_field_blacklist": {
                    "description": "Explicitly denies write access for specific fields.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Permissions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      },
      "delete": {
        "summary": "Delete a Permission",
        "description": "Delete an existing permission",
        "operationId": "deletePermission",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ]
      }
    },
    "/relations": {
      "get": {
        "summary": "List Relations",
        "description": "List the relations.",
        "operationId": "getRelations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Relations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ]
      },
      "post": {
        "summary": "Create a Relation",
        "description": "Create a new relation.",
        "operationId": "createRelation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collection_many": {
                    "description": "Collection that has the field that holds the foreign key.",
                    "type": "string",
                    "example": "articles"
                  },
                  "collection_one": {
                    "description": "Collection on the _one_ side of the relationship.",
                    "type": "string",
                    "example": "authors"
                  },
                  "field_many": {
                    "description": "Foreign key. Field that holds the primary key of the related collection.",
                    "type": "string",
                    "example": "author"
                  },
                  "field_one": {
                    "description": "Alias column that serves as the _one_ side of the relationship.",
                    "type": "string",
                    "example": "books"
                  },
                  "junction_field": {
                    "description": "Field on the junction table that holds the primary key of the related collection.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Relations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ]
      }
    },
    "/relations/{id}": {
      "get": {
        "summary": "Retrieve a Relation",
        "description": "Retrieve a single relation by unique identifier.",
        "operationId": "getRelation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Relations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ]
      },
      "patch": {
        "summary": "Update a Relation",
        "description": "Update an existing relation",
        "operationId": "updateRelation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collection_many": {
                    "description": "Collection that has the field that holds the foreign key.",
                    "type": "string"
                  },
                  "collection_one": {
                    "description": "Collection on the _one_ side of the relationship.",
                    "type": "string"
                  },
                  "field_many": {
                    "description": "Foreign key. Field that holds the primary key of the related collection.",
                    "type": "string"
                  },
                  "field_one": {
                    "description": "Alias column that serves as the _one_ side of the relationship.",
                    "type": "string",
                    "example": "books"
                  },
                  "junction_field": {
                    "description": "Field on the junction table that holds the primary key of the related collection.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Relations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ]
      },
      "delete": {
        "summary": "Delete a Relation",
        "description": "Delete an existing relation.",
        "operationId": "deleteRelation",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ]
      }
    },
    "/presets": {
      "get": {
        "tags": [
          "Presets"
        ],
        "operationId": "getPresets",
        "summary": "List Presets",
        "description": "List the presets.",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Presets"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": [
          "Presets"
        ],
        "operationId": "createPreset",
        "summary": "Create a Preset",
        "description": "Create a new preset.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "What collection this collection preset is used for.",
                    "example": "articles"
                  },
                  "title": {
                    "type": "string",
                    "description": "Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.",
                    "example": "Highly rated articles"
                  },
                  "role": {
                    "type": "string",
                    "description": "The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.",
                    "example": null
                  },
                  "search": {
                    "type": "string",
                    "description": "What the user searched for in search/filter in the header bar."
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "example": "aHKLAakdVghzD"
                        },
                        "field": {
                          "type": "string",
                          "example": "rating"
                        },
                        "operator": {
                          "type": "string",
                          "example": "gte"
                        },
                        "value": {
                          "type": "integer",
                          "example": 4.5
                        }
                      }
                    }
                  },
                  "layout": {
                    "type": "string",
                    "description": "Name of the view type that is used."
                  },
                  "layout_query": {
                    "type": "string",
                    "description": "Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters."
                  },
                  "layout_options": {
                    "type": "string",
                    "description": "Options of the views. The properties in here are controlled by the layout."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Presets"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Presets",
        "description": "Update multiple presets at the same time.",
        "tags": [
          "Presets"
        ],
        "operationId": "updatePresets",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data": {
                    "type": "object",
                    "required": [
                      "collection"
                    ],
                    "properties": {
                      "collection": {
                        "type": "string",
                        "description": "What collection this collection preset is used for.",
                        "example": "articles"
                      },
                      "title": {
                        "type": "string",
                        "description": "Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.",
                        "example": "Highly rated articles"
                      },
                      "role": {
                        "type": "string",
                        "description": "The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.",
                        "example": null
                      },
                      "search": {
                        "type": "string",
                        "description": "What the user searched for in search/filter in the header bar."
                      },
                      "filters": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string",
                              "example": "aHKLAakdVghzD"
                            },
                            "field": {
                              "type": "string",
                              "example": "rating"
                            },
                            "operator": {
                              "type": "string",
                              "example": "gte"
                            },
                            "value": {
                              "type": "integer",
                              "example": 4.5
                            }
                          }
                        }
                      },
                      "layout": {
                        "type": "string",
                        "description": "Name of the view type that is used."
                      },
                      "layout_query": {
                        "type": "string",
                        "description": "Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters."
                      },
                      "layout_options": {
                        "type": "string",
                        "description": "Options of the views. The properties in here are controlled by the layout."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Presets"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Presets",
        "description": "Delete multiple existing presets.",
        "tags": [
          "Presets"
        ],
        "operationId": "deletePresets",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/presets/{id}": {
      "get": {
        "tags": [
          "Presets"
        ],
        "operationId": "getPreset",
        "summary": "Retrieve a Preset",
        "description": "Retrieve a single preset by unique identifier.",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Presets"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "tags": [
          "Presets"
        ],
        "operationId": "updatePreset",
        "summary": "Update a Preset",
        "description": "Update an existing preset.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "What collection this collection preset is used for.",
                    "example": "articles"
                  },
                  "title": {
                    "type": "string",
                    "description": "Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.",
                    "example": "Highly rated articles"
                  },
                  "role": {
                    "type": "integer",
                    "description": "The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role."
                  },
                  "search_query": {
                    "type": "string",
                    "description": "What the user searched for in search/filter in the header bar."
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "field": {
                          "type": "string",
                          "example": "rating"
                        },
                        "operator": {
                          "type": "string",
                          "example": "gte"
                        },
                        "value": {
                          "type": "integer",
                          "example": 4.5
                        }
                      }
                    }
                  },
                  "view_type": {
                    "type": "string",
                    "description": "Name of the view type that is used. Defaults to tabular."
                  },
                  "view_query": {
                    "type": "string",
                    "description": "View query that's saved per view type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters."
                  },
                  "view_options": {
                    "type": "string",
                    "description": "Options of the views. The properties in here are controlled by the layout."
                  },
                  "translation": {
                    "type": "object",
                    "description": "Key value pair of language-translation. Can be used to translate the bookmark title in multiple languages."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Presets"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "tags": [
          "Presets"
        ],
        "operationId": "deletePreset",
        "summary": "Delete a Preset",
        "description": "Delete an existing preset.",
        "security": [
          {
            "Auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ]
      }
    },
    "/flows": {
      "get": {
        "summary": "List Flows",
        "description": "Get all flows.",
        "operationId": "getFlows",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Flows"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Flows"
        ]
      },
      "post": {
        "summary": "Create a Flow",
        "description": "Create a new flow.",
        "operationId": "createFlow",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Flows"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Flows"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Flows"
        ]
      },
      "patch": {
        "summary": "Update Multiple Flows",
        "description": "Update multiple flows at the same time.",
        "tags": [
          "Flows"
        ],
        "operationId": "updateFlows",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Flows"
                      }
                    ]
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Flows"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Flows",
        "description": "Delete multiple existing flows.",
        "tags": [
          "Flows"
        ],
        "operationId": "deleteFlows",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/flows/{id}": {
      "get": {
        "summary": "Retrieve a Flow",
        "description": "Retrieve a single flow by unique identifier.",
        "operationId": "getFlow",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Flows"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Flows"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      },
      "patch": {
        "summary": "Update a Flow",
        "description": "Update an existing flow",
        "operationId": "updateFlow",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Flows"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Flows"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Flows"
        ]
      },
      "delete": {
        "summary": "Delete a Flow",
        "description": "Delete an existing flow",
        "operationId": "deleteFlow",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Flows"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/operations": {
      "get": {
        "summary": "List Operations",
        "description": "Get all operations.",
        "operationId": "getOperations",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Operations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Operations"
        ]
      },
      "post": {
        "summary": "Create an Operation",
        "description": "Create a new operation.",
        "operationId": "createOperation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Operations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Operations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Operations"
        ]
      },
      "patch": {
        "summary": "Update Multiple Operations",
        "description": "Update multiple operations at the same time.",
        "tags": [
          "Operations"
        ],
        "operationId": "updateOperations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Operations"
                      }
                    ]
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Operations"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Operations",
        "description": "Delete multiple existing operations.",
        "tags": [
          "Operations"
        ],
        "operationId": "deleteOperations",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/operations/{id}": {
      "get": {
        "summary": "Retrieve an Operation",
        "description": "Retrieve a single operation by unique identifier.",
        "operationId": "getOperation",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Operations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Operations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      },
      "patch": {
        "summary": "Update an Operation",
        "description": "Update an existing operation",
        "operationId": "updateOperation",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Operations"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Operations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Operations"
        ]
      },
      "delete": {
        "summary": "Delete an Operation",
        "description": "Delete an existing operation",
        "operationId": "deleteOperation",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Operations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/collections": {
      "get": {
        "summary": "List Collections",
        "description": "Returns a list of the collections available in the project.",
        "operationId": "getCollections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Collections"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ]
      },
      "post": {
        "summary": "Create a Collection",
        "description": "Create a new collection in Directus.",
        "operationId": "createCollection",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection",
                  "fields"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "Unique name of the collection.",
                    "example": "my_collection"
                  },
                  "fields": {
                    "type": "array",
                    "description": "The fields contained in this collection. See the fields reference for more information. Each individual field requires field, type, and interface to be provided.",
                    "items": {
                      "type": "object"
                    }
                  },
                  "icon": {
                    "description": "Name of a Google Material Design Icon that's assigned to this collection.",
                    "type": "string",
                    "example": "people",
                    "nullable": true
                  },
                  "note": {
                    "description": "A note describing the collection.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "display_template": {
                    "description": "Text representation of how items from this collection are shown across the system.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "hidden": {
                    "description": "Whether or not the collection is hidden from the navigation in the admin app.",
                    "type": "boolean",
                    "example": false
                  },
                  "singleton": {
                    "description": "Whether or not the collection is treated as a single object.",
                    "type": "boolean",
                    "example": false
                  },
                  "translation": {
                    "description": "Key value pairs of how to show this collection's name in different languages in the admin app.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "versioning": {
                    "description": "Whether or not Content Versioning is enabled for this collection.",
                    "type": "boolean",
                    "example": false
                  },
                  "archive_field": {
                    "description": "What field holds the archive value.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "archive_app_filter": {
                    "description": "What value to use for \"archived\" items.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "archive_value": {
                    "description": "What value to use to \"unarchive\" items.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "unarchive_value": {
                    "description": "Whether or not to show the \"archived\" filter.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  },
                  "sort_field": {
                    "description": "The sort field in the collection.",
                    "type": "string",
                    "example": null,
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Collections"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ]
      }
    },
    "/collections/{id}": {
      "get": {
        "summary": "Retrieve a Collection",
        "description": "Retrieves the details of a single collection.",
        "operationId": "getCollection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the collection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Collections"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ]
      },
      "patch": {
        "summary": "Update a Collection",
        "description": "Update an existing collection.",
        "operationId": "updateCollection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the collection.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "description": "Metadata of the collection.",
                    "type": "object",
                    "properties": {
                      "icon": {
                        "description": "Name of a Google Material Design Icon that's assigned to this collection.",
                        "type": "string",
                        "example": "people",
                        "nullable": true
                      },
                      "color": {
                        "description": "Choose the color for the icon assigned to this collection.",
                        "type": "string",
                        "example": "#6644ff",
                        "nullable": true
                      },
                      "note": {
                        "description": "A note describing the collection.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "display_template": {
                        "description": "Text representation of how items from this collection are shown across the system.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "hidden": {
                        "description": "Whether or not the collection is hidden from the navigation in the admin app.",
                        "type": "boolean",
                        "example": false
                      },
                      "singleton": {
                        "description": "Whether or not the collection is treated as a single object.",
                        "type": "boolean",
                        "example": false
                      },
                      "translation": {
                        "description": "Key value pairs of how to show this collection's name in different languages in the admin app.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "versioning": {
                        "description": "Whether or not Content Versioning is enabled for this collection.",
                        "type": "boolean",
                        "example": false
                      },
                      "archive_field": {
                        "description": "What field holds the archive value.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "archive_app_filter": {
                        "description": "What value to use for \"archived\" items.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "archive_value": {
                        "description": "What value to use to \"unarchive\" items.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "unarchive_value": {
                        "description": "Whether or not to show the \"archived\" filter.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      },
                      "sort_field": {
                        "description": "The sort field in the collection.",
                        "type": "string",
                        "example": null,
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Collections"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ]
      },
      "delete": {
        "summary": "Delete a Collection",
        "description": "Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution.",
        "operationId": "deleteCollection",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the collection.",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "List Users",
        "description": "List the users.",
        "operationId": "getUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Users"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Create a User",
        "description": "Create a new user.",
        "operationId": "createUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update Multiple Users",
        "description": "Update multiple users at the same time.",
        "tags": [
          "Users"
        ],
        "operationId": "updateUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Users"
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Users"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Users",
        "description": "Delete multiple existing users.",
        "tags": [
          "Users"
        ],
        "operationId": "deleteUsers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Retrieve a User",
        "description": "Retrieve a single user by unique identifier.",
        "operationId": "getUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update a User",
        "description": "Update an existing user",
        "operationId": "updateUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "summary": "Delete a User",
        "description": "Delete an existing user",
        "operationId": "deleteUser",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/users/invite": {
      "post": {
        "summary": "Invite User(s)",
        "description": "Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.",
        "operationId": "invite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "description": "Email address or array of email addresses of the to-be-invited user(s).",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/invite/accept": {
      "post": {
        "summary": "Accept User Invite",
        "description": "Accepts and enables an invited user using a JWT invitation token.",
        "operationId": "acceptInvite",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "eyJh...KmUk",
                    "description": "Accept invite token."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the user.",
                    "format": "password",
                    "example": "d1r3ctu5"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me": {
      "get": {
        "summary": "Retrieve Current User",
        "description": "Retrieve the currently authenticated user.",
        "operationId": "getMe",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update Current User",
        "description": "Update the currently authenticated user.",
        "operationId": "updateMe",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me/track/page": {
      "patch": {
        "summary": "Update Last Page",
        "description": "Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.",
        "operationId": "updateLastUsedPageMe",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "last_page": {
                    "description": "Path of the page you used last.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me/tfa/enable": {
      "post": {
        "summary": "Enable 2FA",
        "description": "Enables two-factor authentication for the currently authenticated user.",
        "operationId": "meTfaEnable",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me/tfa/disable": {
      "post": {
        "summary": "Disable 2FA",
        "description": "Disables two-factor authentication for the currently authenticated user.",
        "operationId": "meTfaDisable",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/items/paper_prototypes": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new paper_prototypes item.",
        "tags": [
          "Items",
          "ItemsPaperPrototypes"
        ],
        "operationId": "createItemsPaperPrototypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperPrototypes"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperPrototypes"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperPrototypes"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the paper_prototypes items.",
        "tags": [
          "Items",
          "ItemsPaperPrototypes"
        ],
        "operationId": "readItemsPaperPrototypes",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPaperPrototypes"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple paper_prototypes items at the same time.",
        "tags": [
          "Items",
          "ItemsPaperPrototypes"
        ],
        "operationId": "updateItemsPaperPrototypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperPrototypes"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperPrototypes"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperPrototypes"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing paper_prototypes items.",
        "tags": [
          "Items",
          "ItemsPaperPrototypes"
        ],
        "operationId": "deleteItemsPaperPrototypes",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/paper_prototypes/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single paper_prototypes item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPaperPrototypes"
        ],
        "operationId": "readSingleItemsPaperPrototypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperPrototypes"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing paper_prototypes item.",
        "tags": [
          "Items",
          "ItemsPaperPrototypes"
        ],
        "operationId": "updateSingleItemsPaperPrototypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPaperPrototypes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperPrototypes"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing paper_prototypes item.",
        "tags": [
          "Items",
          "ItemsPaperPrototypes"
        ],
        "operationId": "deleteSingleItemsPaperPrototypes",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/extensions": {
      "get": {
        "summary": "List Extensions",
        "description": "List the installed extensions and their configuration in the project.",
        "operationId": "listExtensions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Extensions"
                      }
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Extensions"
        ]
      }
    },
    "/extensions/{name}": {
      "patch": {
        "summary": "Update an Extension",
        "description": "Update an existing extension.",
        "operationId": "updateExtensions",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "type": "object",
                    "description": "Directus metadata for the extension. Where the configuration for the extension in the current project is stored.",
                    "properties": {
                      "enabled": {
                        "description": "Whether or not the extension is enabled.",
                        "example": true,
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Extensions"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Extensions"
        ]
      }
    },
    "/extensions/{bundle}/{name}": {
      "patch": {
        "summary": "Update an Extension",
        "description": "Update an existing extension.",
        "operationId": "updateExtensionBundle",
        "parameters": [
          {
            "in": "path",
            "name": "bundle",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "meta": {
                    "type": "object",
                    "description": "Directus metadata for the extension. Where the configuration for the extension in the current project is stored.",
                    "properties": {
                      "enabled": {
                        "description": "Whether or not the extension is enabled.",
                        "example": true,
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Extensions"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Extensions"
        ]
      }
    },
    "/webhooks": {
      "get": {
        "summary": "List Webhooks",
        "description": "Get all webhooks.",
        "operationId": "getWebhooks",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Webhooks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Webhooks"
        ]
      },
      "post": {
        "summary": "Create a Webhook",
        "description": "Create a new webhook.",
        "operationId": "createWebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of the webhook.",
                    "type": "string",
                    "example": "create articles"
                  },
                  "method": {
                    "description": "Method used in the webhook.",
                    "type": "string",
                    "example": "POST"
                  },
                  "url": {
                    "description": "The url of the webhook.",
                    "type": "string",
                    "example": null
                  },
                  "status": {
                    "description": "The status of the webhook.",
                    "type": "string",
                    "example": "active"
                  },
                  "data": {
                    "description": "If yes, send the content of what was done",
                    "type": "boolean",
                    "example": true
                  },
                  "actions": {
                    "description": "The actions that triggers this webhook.",
                    "example": null
                  },
                  "system-collections": {
                    "description": "The collections that triggers this webhook.",
                    "example": null
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Webhooks"
        ]
      },
      "patch": {
        "summary": "Update Multiple Webhooks",
        "description": "Update multiple webhooks at the same time.",
        "tags": [
          "Webhooks"
        ],
        "operationId": "updateWebhooks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "properties": {
                      "name": {
                        "description": "The name of the webhook.",
                        "type": "string",
                        "example": "create articles"
                      },
                      "method": {
                        "description": "Method used in the webhook.",
                        "type": "string",
                        "example": "POST"
                      },
                      "url": {
                        "description": "The url of the webhook.",
                        "type": "string",
                        "example": null
                      },
                      "status": {
                        "description": "The status of the webhook.",
                        "type": "string",
                        "example": "active"
                      },
                      "data": {
                        "description": "If yes, send the content of what was done",
                        "type": "boolean",
                        "example": true
                      },
                      "actions": {
                        "description": "The actions that triggers this webhook.",
                        "example": null
                      },
                      "system-collections": {
                        "description": "The collections that triggers this webhook.",
                        "example": null
                      }
                    },
                    "type": "object"
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Webhooks"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Webhooks",
        "description": "Delete multiple existing webhooks.",
        "tags": [
          "Webhooks"
        ],
        "operationId": "deleteWebhooks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/webhooks/{id}": {
      "get": {
        "summary": "Retrieve a Webhook",
        "description": "Retrieve a single webhook by unique identifier.",
        "operationId": "getWebhook",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Webhooks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      },
      "patch": {
        "summary": "Update a Webhook",
        "description": "Update an existing webhook",
        "operationId": "updateWebhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The name of the webhook.",
                    "type": "string",
                    "example": "create articles"
                  },
                  "method": {
                    "description": "Method used in the webhook.",
                    "type": "string",
                    "example": "POST"
                  },
                  "url": {
                    "description": "The url of the webhook.",
                    "type": "string",
                    "example": null
                  },
                  "status": {
                    "description": "The status of the webhook.",
                    "type": "string",
                    "example": "active"
                  },
                  "data": {
                    "description": "If yes, send the content of what was done",
                    "type": "boolean",
                    "example": true
                  },
                  "actions": {
                    "description": "The actions that triggers this webhook.",
                    "example": null
                  },
                  "system-collections": {
                    "description": "The collections that triggers this webhook.",
                    "example": null
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Webhooks"
        ]
      },
      "delete": {
        "summary": "Delete a Webhook",
        "description": "Delete an existing webhook",
        "operationId": "deleteWebhook",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/comments": {
      "get": {
        "tags": [
          "Comments"
        ],
        "operationId": "getComments",
        "summary": "List Comments",
        "description": "List the comments.",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Comments"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": [
          "Comments"
        ],
        "operationId": "createComment",
        "summary": "Create a Comment",
        "description": "Create a new comment.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection",
                  "item",
                  "comment"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "Which collection this collection comment is for.",
                    "example": "projects"
                  },
                  "item": {
                    "type": "string",
                    "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28"
                  },
                  "comment": {
                    "type": "string",
                    "example": "A new comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Comments"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Comments",
        "description": "Update multiple comments at the same time.",
        "tags": [
          "Comments"
        ],
        "operationId": "updateComments",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "data": {
                    "type": "object",
                    "required": [
                      "collection"
                    ],
                    "properties": {
                      "collection": {
                        "type": "string",
                        "description": "Which collection this collection comment is for.",
                        "example": "projects"
                      },
                      "item": {
                        "type": "string",
                        "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28"
                      },
                      "comment": {
                        "type": "string",
                        "example": "A new comment"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Comments"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Comments",
        "description": "Delete multiple existing comments.",
        "tags": [
          "Comments"
        ],
        "operationId": "deleteComments",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "operationId": "getComment",
        "summary": "Retrieve a Comment",
        "description": "Retrieve a single comment by unique identifier.",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Comments"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "tags": [
          "Comments"
        ],
        "operationId": "updateComment",
        "summary": "Update a Comment",
        "description": "Update an existing comment.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "Which collection this comment is for.",
                    "example": "projects"
                  },
                  "item": {
                    "type": "string",
                    "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28"
                  },
                  "comment": {
                    "type": "string",
                    "example": "An updated comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Comments"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Comments"
        ],
        "operationId": "deleteComment",
        "summary": "Delete a Comment",
        "description": "Delete an existing comment.",
        "security": [
          {
            "Auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/versions": {
      "get": {
        "summary": "List Content Versions",
        "description": "Get all Content Versions.",
        "operationId": "getContentVersions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Versions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      },
      "post": {
        "summary": "Create Multiple Content Versions",
        "description": "Create multiple new Content Versions.",
        "operationId": "createContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Versions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Versions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      },
      "patch": {
        "summary": "Update Multiple Content Versions",
        "description": "Update multiple Content Versions at the same time.",
        "operationId": "updateContentVersions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Versions"
                      }
                    ]
                  },
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Versions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Versions"
        ]
      },
      "delete": {
        "summary": "Delete Multiple Content Versions",
        "description": "Delete multiple existing Content Versions.",
        "operationId": "deleteContentVersions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "tags": [
          "Versions"
        ]
      }
    },
    "/versions/{id}": {
      "get": {
        "summary": "Retrieve a Content Version",
        "description": "Retrieve a single Content Version by unique identifier.",
        "operationId": "getContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Versions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      },
      "patch": {
        "summary": "Update a Content Version",
        "description": "Update an existing Content Version.",
        "operationId": "updateContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/Versions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Versions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      },
      "delete": {
        "summary": "Delete a Content Version",
        "description": "Delete an existing Content Version.",
        "operationId": "deleteContentVersion",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ]
      }
    },
    "/versions/{id}/save": {
      "post": {
        "summary": "Save to a Content Version",
        "description": "Save item changes to an existing Content Version.",
        "operationId": "saveContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      }
    },
    "/versions/{id}/compare": {
      "get": {
        "summary": "Compare a Content Version",
        "description": "Compare an existing Content Version with the main version of the item.",
        "operationId": "compareContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      }
    },
    "/versions/{id}/promote": {
      "post": {
        "summary": "Promote a Content Version",
        "description": "Pass the current hash of the main version of the item (obtained from the `compare` endpoint) along with an optional array of field names of which the values are to be promoted (by default, all fields are selected).",
        "operationId": "promoteContentVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/UUId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mainHash": {
                    "description": "Hash of the main version of the item to be promoted.",
                    "type": "string"
                  },
                  "fields": {
                    "description": "Optional array of field names of which the values are to be promoted.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Versions"
        ]
      }
    },
    "/items/courses": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new courses item.",
        "tags": [
          "Items",
          "ItemsCourses"
        ],
        "operationId": "createItemsCourses",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCourses"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCourses"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsCourses"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the courses items.",
        "tags": [
          "Items",
          "ItemsCourses"
        ],
        "operationId": "readItemsCourses",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCourses"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple courses items at the same time.",
        "tags": [
          "Items",
          "ItemsCourses"
        ],
        "operationId": "updateItemsCourses",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCourses"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCourses"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsCourses"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing courses items.",
        "tags": [
          "Items",
          "ItemsCourses"
        ],
        "operationId": "deleteItemsCourses",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/courses/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single courses item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCourses"
        ],
        "operationId": "readSingleItemsCourses",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCourses"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing courses item.",
        "tags": [
          "Items",
          "ItemsCourses"
        ],
        "operationId": "updateSingleItemsCourses",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCourses"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCourses"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing courses item.",
        "tags": [
          "Items",
          "ItemsCourses"
        ],
        "operationId": "deleteSingleItemsCourses",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/classes": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new classes item.",
        "tags": [
          "Items",
          "ItemsClasses"
        ],
        "operationId": "createItemsClasses",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsClasses"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsClasses"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsClasses"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the classes items.",
        "tags": [
          "Items",
          "ItemsClasses"
        ],
        "operationId": "readItemsClasses",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsClasses"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple classes items at the same time.",
        "tags": [
          "Items",
          "ItemsClasses"
        ],
        "operationId": "updateItemsClasses",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsClasses"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsClasses"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsClasses"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing classes items.",
        "tags": [
          "Items",
          "ItemsClasses"
        ],
        "operationId": "deleteItemsClasses",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/classes/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single classes item by unique identifier.",
        "tags": [
          "Items",
          "ItemsClasses"
        ],
        "operationId": "readSingleItemsClasses",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsClasses"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing classes item.",
        "tags": [
          "Items",
          "ItemsClasses"
        ],
        "operationId": "updateSingleItemsClasses",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsClasses"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsClasses"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing classes item.",
        "tags": [
          "Items",
          "ItemsClasses"
        ],
        "operationId": "deleteSingleItemsClasses",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/institutions": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new institutions item.",
        "tags": [
          "Items",
          "ItemsInstitutions"
        ],
        "operationId": "createItemsInstitutions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsInstitutions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsInstitutions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsInstitutions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the institutions items.",
        "tags": [
          "Items",
          "ItemsInstitutions"
        ],
        "operationId": "readItemsInstitutions",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsInstitutions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple institutions items at the same time.",
        "tags": [
          "Items",
          "ItemsInstitutions"
        ],
        "operationId": "updateItemsInstitutions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsInstitutions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsInstitutions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsInstitutions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing institutions items.",
        "tags": [
          "Items",
          "ItemsInstitutions"
        ],
        "operationId": "deleteItemsInstitutions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/institutions/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single institutions item by unique identifier.",
        "tags": [
          "Items",
          "ItemsInstitutions"
        ],
        "operationId": "readSingleItemsInstitutions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsInstitutions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing institutions item.",
        "tags": [
          "Items",
          "ItemsInstitutions"
        ],
        "operationId": "updateSingleItemsInstitutions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsInstitutions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsInstitutions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing institutions item.",
        "tags": [
          "Items",
          "ItemsInstitutions"
        ],
        "operationId": "deleteSingleItemsInstitutions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/paper_gen_strategies": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new paper_gen_strategies item.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategies"
        ],
        "operationId": "createItemsPaperGenStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperGenStrategies"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperGenStrategies"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperGenStrategies"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the paper_gen_strategies items.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategies"
        ],
        "operationId": "readItemsPaperGenStrategies",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPaperGenStrategies"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple paper_gen_strategies items at the same time.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategies"
        ],
        "operationId": "updateItemsPaperGenStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperGenStrategies"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperGenStrategies"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperGenStrategies"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing paper_gen_strategies items.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategies"
        ],
        "operationId": "deleteItemsPaperGenStrategies",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/paper_gen_strategies/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single paper_gen_strategies item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategies"
        ],
        "operationId": "readSingleItemsPaperGenStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperGenStrategies"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing paper_gen_strategies item.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategies"
        ],
        "operationId": "updateSingleItemsPaperGenStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPaperGenStrategies"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperGenStrategies"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing paper_gen_strategies item.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategies"
        ],
        "operationId": "deleteSingleItemsPaperGenStrategies",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/exams": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new exams item.",
        "tags": [
          "Items",
          "ItemsExams"
        ],
        "operationId": "createItemsExams",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsExams"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsExams"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsExams"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the exams items.",
        "tags": [
          "Items",
          "ItemsExams"
        ],
        "operationId": "readItemsExams",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsExams"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple exams items at the same time.",
        "tags": [
          "Items",
          "ItemsExams"
        ],
        "operationId": "updateItemsExams",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsExams"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsExams"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsExams"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing exams items.",
        "tags": [
          "Items",
          "ItemsExams"
        ],
        "operationId": "deleteItemsExams",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/exams/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single exams item by unique identifier.",
        "tags": [
          "Items",
          "ItemsExams"
        ],
        "operationId": "readSingleItemsExams",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsExams"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing exams item.",
        "tags": [
          "Items",
          "ItemsExams"
        ],
        "operationId": "updateSingleItemsExams",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsExams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsExams"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing exams item.",
        "tags": [
          "Items",
          "ItemsExams"
        ],
        "operationId": "deleteSingleItemsExams",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/knowledge_points": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new knowledge_points item.",
        "tags": [
          "Items",
          "ItemsKnowledgePoints"
        ],
        "operationId": "createItemsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsKnowledgePoints"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsKnowledgePoints"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsKnowledgePoints"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the knowledge_points items.",
        "tags": [
          "Items",
          "ItemsKnowledgePoints"
        ],
        "operationId": "readItemsKnowledgePoints",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsKnowledgePoints"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple knowledge_points items at the same time.",
        "tags": [
          "Items",
          "ItemsKnowledgePoints"
        ],
        "operationId": "updateItemsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsKnowledgePoints"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsKnowledgePoints"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsKnowledgePoints"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing knowledge_points items.",
        "tags": [
          "Items",
          "ItemsKnowledgePoints"
        ],
        "operationId": "deleteItemsKnowledgePoints",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/knowledge_points/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single knowledge_points item by unique identifier.",
        "tags": [
          "Items",
          "ItemsKnowledgePoints"
        ],
        "operationId": "readSingleItemsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsKnowledgePoints"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing knowledge_points item.",
        "tags": [
          "Items",
          "ItemsKnowledgePoints"
        ],
        "operationId": "updateSingleItemsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsKnowledgePoints"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsKnowledgePoints"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing knowledge_points item.",
        "tags": [
          "Items",
          "ItemsKnowledgePoints"
        ],
        "operationId": "deleteSingleItemsKnowledgePoints",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/teachers": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new teachers item.",
        "tags": [
          "Items",
          "ItemsTeachers"
        ],
        "operationId": "createItemsTeachers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsTeachers"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsTeachers"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsTeachers"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the teachers items.",
        "tags": [
          "Items",
          "ItemsTeachers"
        ],
        "operationId": "readItemsTeachers",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsTeachers"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple teachers items at the same time.",
        "tags": [
          "Items",
          "ItemsTeachers"
        ],
        "operationId": "updateItemsTeachers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsTeachers"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsTeachers"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsTeachers"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing teachers items.",
        "tags": [
          "Items",
          "ItemsTeachers"
        ],
        "operationId": "deleteItemsTeachers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/teachers/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single teachers item by unique identifier.",
        "tags": [
          "Items",
          "ItemsTeachers"
        ],
        "operationId": "readSingleItemsTeachers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsTeachers"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing teachers item.",
        "tags": [
          "Items",
          "ItemsTeachers"
        ],
        "operationId": "updateSingleItemsTeachers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsTeachers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsTeachers"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing teachers item.",
        "tags": [
          "Items",
          "ItemsTeachers"
        ],
        "operationId": "deleteSingleItemsTeachers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/students": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new students item.",
        "tags": [
          "Items",
          "ItemsStudents"
        ],
        "operationId": "createItemsStudents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsStudents"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsStudents"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsStudents"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the students items.",
        "tags": [
          "Items",
          "ItemsStudents"
        ],
        "operationId": "readItemsStudents",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsStudents"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple students items at the same time.",
        "tags": [
          "Items",
          "ItemsStudents"
        ],
        "operationId": "updateItemsStudents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsStudents"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsStudents"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsStudents"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing students items.",
        "tags": [
          "Items",
          "ItemsStudents"
        ],
        "operationId": "deleteItemsStudents",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/students/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single students item by unique identifier.",
        "tags": [
          "Items",
          "ItemsStudents"
        ],
        "operationId": "readSingleItemsStudents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsStudents"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing students item.",
        "tags": [
          "Items",
          "ItemsStudents"
        ],
        "operationId": "updateSingleItemsStudents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsStudents"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsStudents"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing students item.",
        "tags": [
          "Items",
          "ItemsStudents"
        ],
        "operationId": "deleteSingleItemsStudents",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/articles_knowledge_points": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new articles_knowledge_points item.",
        "tags": [
          "Items",
          "ItemsArticlesKnowledgePoints"
        ],
        "operationId": "createItemsArticlesKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsArticlesKnowledgePoints"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsArticlesKnowledgePoints"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsArticlesKnowledgePoints"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the articles_knowledge_points items.",
        "tags": [
          "Items",
          "ItemsArticlesKnowledgePoints"
        ],
        "operationId": "readItemsArticlesKnowledgePoints",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsArticlesKnowledgePoints"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple articles_knowledge_points items at the same time.",
        "tags": [
          "Items",
          "ItemsArticlesKnowledgePoints"
        ],
        "operationId": "updateItemsArticlesKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsArticlesKnowledgePoints"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsArticlesKnowledgePoints"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsArticlesKnowledgePoints"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing articles_knowledge_points items.",
        "tags": [
          "Items",
          "ItemsArticlesKnowledgePoints"
        ],
        "operationId": "deleteItemsArticlesKnowledgePoints",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/articles_knowledge_points/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single articles_knowledge_points item by unique identifier.",
        "tags": [
          "Items",
          "ItemsArticlesKnowledgePoints"
        ],
        "operationId": "readSingleItemsArticlesKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsArticlesKnowledgePoints"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing articles_knowledge_points item.",
        "tags": [
          "Items",
          "ItemsArticlesKnowledgePoints"
        ],
        "operationId": "updateSingleItemsArticlesKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsArticlesKnowledgePoints"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsArticlesKnowledgePoints"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing articles_knowledge_points item.",
        "tags": [
          "Items",
          "ItemsArticlesKnowledgePoints"
        ],
        "operationId": "deleteSingleItemsArticlesKnowledgePoints",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/knowledge_points_knowledge_points": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new knowledge_points_knowledge_points item.",
        "tags": [
          "Items",
          "ItemsKnowledgePointsKnowledgePoints"
        ],
        "operationId": "createItemsKnowledgePointsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsKnowledgePointsKnowledgePoints"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsKnowledgePointsKnowledgePoints"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsKnowledgePointsKnowledgePoints"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the knowledge_points_knowledge_points items.",
        "tags": [
          "Items",
          "ItemsKnowledgePointsKnowledgePoints"
        ],
        "operationId": "readItemsKnowledgePointsKnowledgePoints",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsKnowledgePointsKnowledgePoints"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple knowledge_points_knowledge_points items at the same time.",
        "tags": [
          "Items",
          "ItemsKnowledgePointsKnowledgePoints"
        ],
        "operationId": "updateItemsKnowledgePointsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsKnowledgePointsKnowledgePoints"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsKnowledgePointsKnowledgePoints"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsKnowledgePointsKnowledgePoints"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing knowledge_points_knowledge_points items.",
        "tags": [
          "Items",
          "ItemsKnowledgePointsKnowledgePoints"
        ],
        "operationId": "deleteItemsKnowledgePointsKnowledgePoints",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/knowledge_points_knowledge_points/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single knowledge_points_knowledge_points item by unique identifier.",
        "tags": [
          "Items",
          "ItemsKnowledgePointsKnowledgePoints"
        ],
        "operationId": "readSingleItemsKnowledgePointsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsKnowledgePointsKnowledgePoints"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing knowledge_points_knowledge_points item.",
        "tags": [
          "Items",
          "ItemsKnowledgePointsKnowledgePoints"
        ],
        "operationId": "updateSingleItemsKnowledgePointsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsKnowledgePointsKnowledgePoints"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsKnowledgePointsKnowledgePoints"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing knowledge_points_knowledge_points item.",
        "tags": [
          "Items",
          "ItemsKnowledgePointsKnowledgePoints"
        ],
        "operationId": "deleteSingleItemsKnowledgePointsKnowledgePoints",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/notices": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new notices item.",
        "tags": [
          "Items",
          "ItemsNotices"
        ],
        "operationId": "createItemsNotices",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsNotices"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsNotices"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsNotices"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the notices items.",
        "tags": [
          "Items",
          "ItemsNotices"
        ],
        "operationId": "readItemsNotices",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsNotices"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple notices items at the same time.",
        "tags": [
          "Items",
          "ItemsNotices"
        ],
        "operationId": "updateItemsNotices",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsNotices"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsNotices"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsNotices"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing notices items.",
        "tags": [
          "Items",
          "ItemsNotices"
        ],
        "operationId": "deleteItemsNotices",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/notices/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single notices item by unique identifier.",
        "tags": [
          "Items",
          "ItemsNotices"
        ],
        "operationId": "readSingleItemsNotices",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsNotices"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing notices item.",
        "tags": [
          "Items",
          "ItemsNotices"
        ],
        "operationId": "updateSingleItemsNotices",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsNotices"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsNotices"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing notices item.",
        "tags": [
          "Items",
          "ItemsNotices"
        ],
        "operationId": "deleteSingleItemsNotices",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/question_point_assign_strategies": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new question_point_assign_strategies item.",
        "tags": [
          "Items",
          "ItemsQuestionPointAssignStrategies"
        ],
        "operationId": "createItemsQuestionPointAssignStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionPointAssignStrategies"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionPointAssignStrategies"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionPointAssignStrategies"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the question_point_assign_strategies items.",
        "tags": [
          "Items",
          "ItemsQuestionPointAssignStrategies"
        ],
        "operationId": "readItemsQuestionPointAssignStrategies",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionPointAssignStrategies"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple question_point_assign_strategies items at the same time.",
        "tags": [
          "Items",
          "ItemsQuestionPointAssignStrategies"
        ],
        "operationId": "updateItemsQuestionPointAssignStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionPointAssignStrategies"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionPointAssignStrategies"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionPointAssignStrategies"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing question_point_assign_strategies items.",
        "tags": [
          "Items",
          "ItemsQuestionPointAssignStrategies"
        ],
        "operationId": "deleteItemsQuestionPointAssignStrategies",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/question_point_assign_strategies/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single question_point_assign_strategies item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionPointAssignStrategies"
        ],
        "operationId": "readSingleItemsQuestionPointAssignStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionPointAssignStrategies"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing question_point_assign_strategies item.",
        "tags": [
          "Items",
          "ItemsQuestionPointAssignStrategies"
        ],
        "operationId": "updateSingleItemsQuestionPointAssignStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQuestionPointAssignStrategies"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionPointAssignStrategies"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing question_point_assign_strategies item.",
        "tags": [
          "Items",
          "ItemsQuestionPointAssignStrategies"
        ],
        "operationId": "deleteSingleItemsQuestionPointAssignStrategies",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/questions_sections": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new questions_sections item.",
        "tags": [
          "Items",
          "ItemsQuestionsSections"
        ],
        "operationId": "createItemsQuestionsSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionsSections"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionsSections"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionsSections"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the questions_sections items.",
        "tags": [
          "Items",
          "ItemsQuestionsSections"
        ],
        "operationId": "readItemsQuestionsSections",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionsSections"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple questions_sections items at the same time.",
        "tags": [
          "Items",
          "ItemsQuestionsSections"
        ],
        "operationId": "updateItemsQuestionsSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionsSections"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionsSections"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionsSections"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing questions_sections items.",
        "tags": [
          "Items",
          "ItemsQuestionsSections"
        ],
        "operationId": "deleteItemsQuestionsSections",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/questions_sections/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single questions_sections item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionsSections"
        ],
        "operationId": "readSingleItemsQuestionsSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionsSections"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing questions_sections item.",
        "tags": [
          "Items",
          "ItemsQuestionsSections"
        ],
        "operationId": "updateSingleItemsQuestionsSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQuestionsSections"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionsSections"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing questions_sections item.",
        "tags": [
          "Items",
          "ItemsQuestionsSections"
        ],
        "operationId": "deleteSingleItemsQuestionsSections",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/articles_sections": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new articles_sections item.",
        "tags": [
          "Items",
          "ItemsArticlesSections"
        ],
        "operationId": "createItemsArticlesSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsArticlesSections"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsArticlesSections"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsArticlesSections"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the articles_sections items.",
        "tags": [
          "Items",
          "ItemsArticlesSections"
        ],
        "operationId": "readItemsArticlesSections",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsArticlesSections"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple articles_sections items at the same time.",
        "tags": [
          "Items",
          "ItemsArticlesSections"
        ],
        "operationId": "updateItemsArticlesSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsArticlesSections"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsArticlesSections"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsArticlesSections"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing articles_sections items.",
        "tags": [
          "Items",
          "ItemsArticlesSections"
        ],
        "operationId": "deleteItemsArticlesSections",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/articles_sections/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single articles_sections item by unique identifier.",
        "tags": [
          "Items",
          "ItemsArticlesSections"
        ],
        "operationId": "readSingleItemsArticlesSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsArticlesSections"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing articles_sections item.",
        "tags": [
          "Items",
          "ItemsArticlesSections"
        ],
        "operationId": "updateSingleItemsArticlesSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsArticlesSections"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsArticlesSections"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing articles_sections item.",
        "tags": [
          "Items",
          "ItemsArticlesSections"
        ],
        "operationId": "deleteSingleItemsArticlesSections",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/paper_gen_strategy_items": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new paper_gen_strategy_items item.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategyItems"
        ],
        "operationId": "createItemsPaperGenStrategyItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperGenStrategyItems"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperGenStrategyItems"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperGenStrategyItems"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the paper_gen_strategy_items items.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategyItems"
        ],
        "operationId": "readItemsPaperGenStrategyItems",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPaperGenStrategyItems"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple paper_gen_strategy_items items at the same time.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategyItems"
        ],
        "operationId": "updateItemsPaperGenStrategyItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperGenStrategyItems"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperGenStrategyItems"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperGenStrategyItems"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing paper_gen_strategy_items items.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategyItems"
        ],
        "operationId": "deleteItemsPaperGenStrategyItems",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/paper_gen_strategy_items/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single paper_gen_strategy_items item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategyItems"
        ],
        "operationId": "readSingleItemsPaperGenStrategyItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperGenStrategyItems"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing paper_gen_strategy_items item.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategyItems"
        ],
        "operationId": "updateSingleItemsPaperGenStrategyItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPaperGenStrategyItems"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperGenStrategyItems"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing paper_gen_strategy_items item.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategyItems"
        ],
        "operationId": "deleteSingleItemsPaperGenStrategyItems",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/paper_prototype_chapters": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new paper_prototype_chapters item.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChapters"
        ],
        "operationId": "createItemsPaperPrototypeChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperPrototypeChapters"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperPrototypeChapters"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperPrototypeChapters"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the paper_prototype_chapters items.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChapters"
        ],
        "operationId": "readItemsPaperPrototypeChapters",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPaperPrototypeChapters"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple paper_prototype_chapters items at the same time.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChapters"
        ],
        "operationId": "updateItemsPaperPrototypeChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperPrototypeChapters"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperPrototypeChapters"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperPrototypeChapters"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing paper_prototype_chapters items.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChapters"
        ],
        "operationId": "deleteItemsPaperPrototypeChapters",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/paper_prototype_chapters/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single paper_prototype_chapters item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChapters"
        ],
        "operationId": "readSingleItemsPaperPrototypeChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperPrototypeChapters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing paper_prototype_chapters item.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChapters"
        ],
        "operationId": "updateSingleItemsPaperPrototypeChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPaperPrototypeChapters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperPrototypeChapters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing paper_prototype_chapters item.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChapters"
        ],
        "operationId": "deleteSingleItemsPaperPrototypeChapters",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/paper_prototype_chapters_questions": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new paper_prototype_chapters_questions item.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChaptersQuestions"
        ],
        "operationId": "createItemsPaperPrototypeChaptersQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the paper_prototype_chapters_questions items.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChaptersQuestions"
        ],
        "operationId": "readItemsPaperPrototypeChaptersQuestions",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple paper_prototype_chapters_questions items at the same time.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChaptersQuestions"
        ],
        "operationId": "updateItemsPaperPrototypeChaptersQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing paper_prototype_chapters_questions items.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChaptersQuestions"
        ],
        "operationId": "deleteItemsPaperPrototypeChaptersQuestions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/paper_prototype_chapters_questions/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single paper_prototype_chapters_questions item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChaptersQuestions"
        ],
        "operationId": "readSingleItemsPaperPrototypeChaptersQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing paper_prototype_chapters_questions item.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChaptersQuestions"
        ],
        "operationId": "updateSingleItemsPaperPrototypeChaptersQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing paper_prototype_chapters_questions item.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChaptersQuestions"
        ],
        "operationId": "deleteSingleItemsPaperPrototypeChaptersQuestions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/questions_knowledge_points": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new questions_knowledge_points item.",
        "tags": [
          "Items",
          "ItemsQuestionsKnowledgePoints"
        ],
        "operationId": "createItemsQuestionsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionsKnowledgePoints"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionsKnowledgePoints"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionsKnowledgePoints"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the questions_knowledge_points items.",
        "tags": [
          "Items",
          "ItemsQuestionsKnowledgePoints"
        ],
        "operationId": "readItemsQuestionsKnowledgePoints",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionsKnowledgePoints"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple questions_knowledge_points items at the same time.",
        "tags": [
          "Items",
          "ItemsQuestionsKnowledgePoints"
        ],
        "operationId": "updateItemsQuestionsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionsKnowledgePoints"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionsKnowledgePoints"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionsKnowledgePoints"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing questions_knowledge_points items.",
        "tags": [
          "Items",
          "ItemsQuestionsKnowledgePoints"
        ],
        "operationId": "deleteItemsQuestionsKnowledgePoints",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/questions_knowledge_points/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single questions_knowledge_points item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionsKnowledgePoints"
        ],
        "operationId": "readSingleItemsQuestionsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionsKnowledgePoints"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing questions_knowledge_points item.",
        "tags": [
          "Items",
          "ItemsQuestionsKnowledgePoints"
        ],
        "operationId": "updateSingleItemsQuestionsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQuestionsKnowledgePoints"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionsKnowledgePoints"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing questions_knowledge_points item.",
        "tags": [
          "Items",
          "ItemsQuestionsKnowledgePoints"
        ],
        "operationId": "deleteSingleItemsQuestionsKnowledgePoints",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/sections_knowledge_points": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new sections_knowledge_points item.",
        "tags": [
          "Items",
          "ItemsSectionsKnowledgePoints"
        ],
        "operationId": "createItemsSectionsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionsKnowledgePoints"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionsKnowledgePoints"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionsKnowledgePoints"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the sections_knowledge_points items.",
        "tags": [
          "Items",
          "ItemsSectionsKnowledgePoints"
        ],
        "operationId": "readItemsSectionsKnowledgePoints",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSectionsKnowledgePoints"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple sections_knowledge_points items at the same time.",
        "tags": [
          "Items",
          "ItemsSectionsKnowledgePoints"
        ],
        "operationId": "updateItemsSectionsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSectionsKnowledgePoints"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSectionsKnowledgePoints"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSectionsKnowledgePoints"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing sections_knowledge_points items.",
        "tags": [
          "Items",
          "ItemsSectionsKnowledgePoints"
        ],
        "operationId": "deleteItemsSectionsKnowledgePoints",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/sections_knowledge_points/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single sections_knowledge_points item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSectionsKnowledgePoints"
        ],
        "operationId": "readSingleItemsSectionsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionsKnowledgePoints"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing sections_knowledge_points item.",
        "tags": [
          "Items",
          "ItemsSectionsKnowledgePoints"
        ],
        "operationId": "updateSingleItemsSectionsKnowledgePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSectionsKnowledgePoints"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSectionsKnowledgePoints"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing sections_knowledge_points item.",
        "tags": [
          "Items",
          "ItemsSectionsKnowledgePoints"
        ],
        "operationId": "deleteSingleItemsSectionsKnowledgePoints",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/paper_gen_strategy_chapters": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new paper_gen_strategy_chapters item.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategyChapters"
        ],
        "operationId": "createItemsPaperGenStrategyChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperGenStrategyChapters"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperGenStrategyChapters"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperGenStrategyChapters"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the paper_gen_strategy_chapters items.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategyChapters"
        ],
        "operationId": "readItemsPaperGenStrategyChapters",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPaperGenStrategyChapters"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple paper_gen_strategy_chapters items at the same time.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategyChapters"
        ],
        "operationId": "updateItemsPaperGenStrategyChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperGenStrategyChapters"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperGenStrategyChapters"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperGenStrategyChapters"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing paper_gen_strategy_chapters items.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategyChapters"
        ],
        "operationId": "deleteItemsPaperGenStrategyChapters",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/paper_gen_strategy_chapters/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single paper_gen_strategy_chapters item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategyChapters"
        ],
        "operationId": "readSingleItemsPaperGenStrategyChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperGenStrategyChapters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing paper_gen_strategy_chapters item.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategyChapters"
        ],
        "operationId": "updateSingleItemsPaperGenStrategyChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPaperGenStrategyChapters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperGenStrategyChapters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing paper_gen_strategy_chapters item.",
        "tags": [
          "Items",
          "ItemsPaperGenStrategyChapters"
        ],
        "operationId": "deleteSingleItemsPaperGenStrategyChapters",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/sections": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new sections item.",
        "tags": [
          "Items",
          "ItemsSections"
        ],
        "operationId": "createItemsSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSections"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSections"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSections"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the sections items.",
        "tags": [
          "Items",
          "ItemsSections"
        ],
        "operationId": "readItemsSections",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSections"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple sections items at the same time.",
        "tags": [
          "Items",
          "ItemsSections"
        ],
        "operationId": "updateItemsSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSections"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSections"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSections"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing sections items.",
        "tags": [
          "Items",
          "ItemsSections"
        ],
        "operationId": "deleteItemsSections",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/sections/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single sections item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSections"
        ],
        "operationId": "readSingleItemsSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSections"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing sections item.",
        "tags": [
          "Items",
          "ItemsSections"
        ],
        "operationId": "updateSingleItemsSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSections"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSections"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing sections item.",
        "tags": [
          "Items",
          "ItemsSections"
        ],
        "operationId": "deleteSingleItemsSections",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/paper_prototype_chapters_question_groups": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new paper_prototype_chapters_question_groups item.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChaptersQuestionGroups"
        ],
        "operationId": "createItemsPaperPrototypeChaptersQuestionGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestionGroups"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestionGroups"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestionGroups"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the paper_prototype_chapters_question_groups items.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChaptersQuestionGroups"
        ],
        "operationId": "readItemsPaperPrototypeChaptersQuestionGroups",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestionGroups"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple paper_prototype_chapters_question_groups items at the same time.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChaptersQuestionGroups"
        ],
        "operationId": "updateItemsPaperPrototypeChaptersQuestionGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestionGroups"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestionGroups"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestionGroups"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing paper_prototype_chapters_question_groups items.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChaptersQuestionGroups"
        ],
        "operationId": "deleteItemsPaperPrototypeChaptersQuestionGroups",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/paper_prototype_chapters_question_groups/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single paper_prototype_chapters_question_groups item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChaptersQuestionGroups"
        ],
        "operationId": "readSingleItemsPaperPrototypeChaptersQuestionGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestionGroups"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing paper_prototype_chapters_question_groups item.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChaptersQuestionGroups"
        ],
        "operationId": "updateSingleItemsPaperPrototypeChaptersQuestionGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestionGroups"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestionGroups"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing paper_prototype_chapters_question_groups item.",
        "tags": [
          "Items",
          "ItemsPaperPrototypeChaptersQuestionGroups"
        ],
        "operationId": "deleteSingleItemsPaperPrototypeChaptersQuestionGroups",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/questions": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new questions item.",
        "tags": [
          "Items",
          "ItemsQuestions"
        ],
        "operationId": "createItemsQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the questions items.",
        "tags": [
          "Items",
          "ItemsQuestions"
        ],
        "operationId": "readItemsQuestions",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple questions items at the same time.",
        "tags": [
          "Items",
          "ItemsQuestions"
        ],
        "operationId": "updateItemsQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing questions items.",
        "tags": [
          "Items",
          "ItemsQuestions"
        ],
        "operationId": "deleteItemsQuestions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/questions/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single questions item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestions"
        ],
        "operationId": "readSingleItemsQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing questions item.",
        "tags": [
          "Items",
          "ItemsQuestions"
        ],
        "operationId": "updateSingleItemsQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQuestions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing questions item.",
        "tags": [
          "Items",
          "ItemsQuestions"
        ],
        "operationId": "deleteSingleItemsQuestions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/submitted_papers": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new submitted_papers item.",
        "tags": [
          "Items",
          "ItemsSubmittedPapers"
        ],
        "operationId": "createItemsSubmittedPapers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSubmittedPapers"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSubmittedPapers"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSubmittedPapers"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the submitted_papers items.",
        "tags": [
          "Items",
          "ItemsSubmittedPapers"
        ],
        "operationId": "readItemsSubmittedPapers",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSubmittedPapers"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple submitted_papers items at the same time.",
        "tags": [
          "Items",
          "ItemsSubmittedPapers"
        ],
        "operationId": "updateItemsSubmittedPapers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSubmittedPapers"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSubmittedPapers"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSubmittedPapers"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing submitted_papers items.",
        "tags": [
          "Items",
          "ItemsSubmittedPapers"
        ],
        "operationId": "deleteItemsSubmittedPapers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/submitted_papers/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single submitted_papers item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSubmittedPapers"
        ],
        "operationId": "readSingleItemsSubmittedPapers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSubmittedPapers"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing submitted_papers item.",
        "tags": [
          "Items",
          "ItemsSubmittedPapers"
        ],
        "operationId": "updateSingleItemsSubmittedPapers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSubmittedPapers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSubmittedPapers"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing submitted_papers item.",
        "tags": [
          "Items",
          "ItemsSubmittedPapers"
        ],
        "operationId": "deleteSingleItemsSubmittedPapers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/exams_students": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new exams_students item.",
        "tags": [
          "Items",
          "ItemsExamsStudents"
        ],
        "operationId": "createItemsExamsStudents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsExamsStudents"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsExamsStudents"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsExamsStudents"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the exams_students items.",
        "tags": [
          "Items",
          "ItemsExamsStudents"
        ],
        "operationId": "readItemsExamsStudents",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsExamsStudents"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple exams_students items at the same time.",
        "tags": [
          "Items",
          "ItemsExamsStudents"
        ],
        "operationId": "updateItemsExamsStudents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsExamsStudents"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsExamsStudents"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsExamsStudents"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing exams_students items.",
        "tags": [
          "Items",
          "ItemsExamsStudents"
        ],
        "operationId": "deleteItemsExamsStudents",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/exams_students/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single exams_students item by unique identifier.",
        "tags": [
          "Items",
          "ItemsExamsStudents"
        ],
        "operationId": "readSingleItemsExamsStudents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsExamsStudents"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing exams_students item.",
        "tags": [
          "Items",
          "ItemsExamsStudents"
        ],
        "operationId": "updateSingleItemsExamsStudents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsExamsStudents"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsExamsStudents"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing exams_students item.",
        "tags": [
          "Items",
          "ItemsExamsStudents"
        ],
        "operationId": "deleteSingleItemsExamsStudents",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/question_groups": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new question_groups item.",
        "tags": [
          "Items",
          "ItemsQuestionGroups"
        ],
        "operationId": "createItemsQuestionGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionGroups"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionGroups"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionGroups"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the question_groups items.",
        "tags": [
          "Items",
          "ItemsQuestionGroups"
        ],
        "operationId": "readItemsQuestionGroups",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionGroups"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple question_groups items at the same time.",
        "tags": [
          "Items",
          "ItemsQuestionGroups"
        ],
        "operationId": "updateItemsQuestionGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionGroups"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionGroups"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionGroups"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing question_groups items.",
        "tags": [
          "Items",
          "ItemsQuestionGroups"
        ],
        "operationId": "deleteItemsQuestionGroups",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/question_groups/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single question_groups item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionGroups"
        ],
        "operationId": "readSingleItemsQuestionGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionGroups"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing question_groups item.",
        "tags": [
          "Items",
          "ItemsQuestionGroups"
        ],
        "operationId": "updateSingleItemsQuestionGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQuestionGroups"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionGroups"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing question_groups item.",
        "tags": [
          "Items",
          "ItemsQuestionGroups"
        ],
        "operationId": "deleteSingleItemsQuestionGroups",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/subjects": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new subjects item.",
        "tags": [
          "Items",
          "ItemsSubjects"
        ],
        "operationId": "createItemsSubjects",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSubjects"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSubjects"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSubjects"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the subjects items.",
        "tags": [
          "Items",
          "ItemsSubjects"
        ],
        "operationId": "readItemsSubjects",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSubjects"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple subjects items at the same time.",
        "tags": [
          "Items",
          "ItemsSubjects"
        ],
        "operationId": "updateItemsSubjects",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSubjects"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSubjects"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSubjects"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing subjects items.",
        "tags": [
          "Items",
          "ItemsSubjects"
        ],
        "operationId": "deleteItemsSubjects",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/subjects/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single subjects item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSubjects"
        ],
        "operationId": "readSingleItemsSubjects",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSubjects"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing subjects item.",
        "tags": [
          "Items",
          "ItemsSubjects"
        ],
        "operationId": "updateSingleItemsSubjects",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSubjects"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSubjects"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing subjects item.",
        "tags": [
          "Items",
          "ItemsSubjects"
        ],
        "operationId": "deleteSingleItemsSubjects",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/q_mc_flexible": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new q_mc_flexible item.",
        "tags": [
          "Items",
          "ItemsQMcFlexible"
        ],
        "operationId": "createItemsQMcFlexible",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQMcFlexible"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQMcFlexible"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQMcFlexible"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the q_mc_flexible items.",
        "tags": [
          "Items",
          "ItemsQMcFlexible"
        ],
        "operationId": "readItemsQMcFlexible",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQMcFlexible"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple q_mc_flexible items at the same time.",
        "tags": [
          "Items",
          "ItemsQMcFlexible"
        ],
        "operationId": "updateItemsQMcFlexible",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQMcFlexible"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQMcFlexible"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQMcFlexible"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing q_mc_flexible items.",
        "tags": [
          "Items",
          "ItemsQMcFlexible"
        ],
        "operationId": "deleteItemsQMcFlexible",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/q_mc_flexible/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single q_mc_flexible item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQMcFlexible"
        ],
        "operationId": "readSingleItemsQMcFlexible",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQMcFlexible"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing q_mc_flexible item.",
        "tags": [
          "Items",
          "ItemsQMcFlexible"
        ],
        "operationId": "updateSingleItemsQMcFlexible",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQMcFlexible"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQMcFlexible"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing q_mc_flexible item.",
        "tags": [
          "Items",
          "ItemsQMcFlexible"
        ],
        "operationId": "deleteSingleItemsQMcFlexible",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/q_mc": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new q_mc item.",
        "tags": [
          "Items",
          "ItemsQMc"
        ],
        "operationId": "createItemsQMc",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQMc"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQMc"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQMc"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the q_mc items.",
        "tags": [
          "Items",
          "ItemsQMc"
        ],
        "operationId": "readItemsQMc",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQMc"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple q_mc items at the same time.",
        "tags": [
          "Items",
          "ItemsQMc"
        ],
        "operationId": "updateItemsQMc",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQMc"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQMc"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQMc"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing q_mc items.",
        "tags": [
          "Items",
          "ItemsQMc"
        ],
        "operationId": "deleteItemsQMc",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/q_mc/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single q_mc item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQMc"
        ],
        "operationId": "readSingleItemsQMc",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQMc"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing q_mc item.",
        "tags": [
          "Items",
          "ItemsQMc"
        ],
        "operationId": "updateSingleItemsQMc",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQMc"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQMc"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing q_mc item.",
        "tags": [
          "Items",
          "ItemsQMc"
        ],
        "operationId": "deleteSingleItemsQMc",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/q_mc_multi": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new q_mc_multi item.",
        "tags": [
          "Items",
          "ItemsQMcMulti"
        ],
        "operationId": "createItemsQMcMulti",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQMcMulti"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQMcMulti"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQMcMulti"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the q_mc_multi items.",
        "tags": [
          "Items",
          "ItemsQMcMulti"
        ],
        "operationId": "readItemsQMcMulti",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQMcMulti"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple q_mc_multi items at the same time.",
        "tags": [
          "Items",
          "ItemsQMcMulti"
        ],
        "operationId": "updateItemsQMcMulti",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQMcMulti"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQMcMulti"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQMcMulti"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing q_mc_multi items.",
        "tags": [
          "Items",
          "ItemsQMcMulti"
        ],
        "operationId": "deleteItemsQMcMulti",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/q_mc_multi/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single q_mc_multi item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQMcMulti"
        ],
        "operationId": "readSingleItemsQMcMulti",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQMcMulti"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing q_mc_multi item.",
        "tags": [
          "Items",
          "ItemsQMcMulti"
        ],
        "operationId": "updateSingleItemsQMcMulti",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQMcMulti"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQMcMulti"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing q_mc_multi item.",
        "tags": [
          "Items",
          "ItemsQMcMulti"
        ],
        "operationId": "deleteSingleItemsQMcMulti",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/q_mc_binary": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new q_mc_binary item.",
        "tags": [
          "Items",
          "ItemsQMcBinary"
        ],
        "operationId": "createItemsQMcBinary",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQMcBinary"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQMcBinary"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQMcBinary"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the q_mc_binary items.",
        "tags": [
          "Items",
          "ItemsQMcBinary"
        ],
        "operationId": "readItemsQMcBinary",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQMcBinary"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple q_mc_binary items at the same time.",
        "tags": [
          "Items",
          "ItemsQMcBinary"
        ],
        "operationId": "updateItemsQMcBinary",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQMcBinary"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQMcBinary"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQMcBinary"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing q_mc_binary items.",
        "tags": [
          "Items",
          "ItemsQMcBinary"
        ],
        "operationId": "deleteItemsQMcBinary",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/q_mc_binary/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single q_mc_binary item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQMcBinary"
        ],
        "operationId": "readSingleItemsQMcBinary",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQMcBinary"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing q_mc_binary item.",
        "tags": [
          "Items",
          "ItemsQMcBinary"
        ],
        "operationId": "updateSingleItemsQMcBinary",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQMcBinary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQMcBinary"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing q_mc_binary item.",
        "tags": [
          "Items",
          "ItemsQMcBinary"
        ],
        "operationId": "deleteSingleItemsQMcBinary",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/submitted_exams": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new submitted_exams item.",
        "tags": [
          "Items",
          "ItemsSubmittedExams"
        ],
        "operationId": "createItemsSubmittedExams",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSubmittedExams"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSubmittedExams"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSubmittedExams"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the submitted_exams items.",
        "tags": [
          "Items",
          "ItemsSubmittedExams"
        ],
        "operationId": "readItemsSubmittedExams",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSubmittedExams"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple submitted_exams items at the same time.",
        "tags": [
          "Items",
          "ItemsSubmittedExams"
        ],
        "operationId": "updateItemsSubmittedExams",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSubmittedExams"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSubmittedExams"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSubmittedExams"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing submitted_exams items.",
        "tags": [
          "Items",
          "ItemsSubmittedExams"
        ],
        "operationId": "deleteItemsSubmittedExams",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/submitted_exams/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single submitted_exams item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSubmittedExams"
        ],
        "operationId": "readSingleItemsSubmittedExams",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSubmittedExams"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing submitted_exams item.",
        "tags": [
          "Items",
          "ItemsSubmittedExams"
        ],
        "operationId": "updateSingleItemsSubmittedExams",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSubmittedExams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSubmittedExams"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing submitted_exams item.",
        "tags": [
          "Items",
          "ItemsSubmittedExams"
        ],
        "operationId": "deleteSingleItemsSubmittedExams",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/questions_spreadsheet": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new questions_spreadsheet item.",
        "tags": [
          "Items",
          "ItemsQuestionsSpreadsheet"
        ],
        "operationId": "createItemsQuestionsSpreadsheet",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionsSpreadsheet"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionsSpreadsheet"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionsSpreadsheet"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the questions_spreadsheet items.",
        "tags": [
          "Items",
          "ItemsQuestionsSpreadsheet"
        ],
        "operationId": "readItemsQuestionsSpreadsheet",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionsSpreadsheet"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple questions_spreadsheet items at the same time.",
        "tags": [
          "Items",
          "ItemsQuestionsSpreadsheet"
        ],
        "operationId": "updateItemsQuestionsSpreadsheet",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionsSpreadsheet"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionsSpreadsheet"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionsSpreadsheet"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing questions_spreadsheet items.",
        "tags": [
          "Items",
          "ItemsQuestionsSpreadsheet"
        ],
        "operationId": "deleteItemsQuestionsSpreadsheet",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/questions_spreadsheet/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single questions_spreadsheet item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionsSpreadsheet"
        ],
        "operationId": "readSingleItemsQuestionsSpreadsheet",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionsSpreadsheet"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing questions_spreadsheet item.",
        "tags": [
          "Items",
          "ItemsQuestionsSpreadsheet"
        ],
        "operationId": "updateSingleItemsQuestionsSpreadsheet",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQuestionsSpreadsheet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionsSpreadsheet"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing questions_spreadsheet item.",
        "tags": [
          "Items",
          "ItemsQuestionsSpreadsheet"
        ],
        "operationId": "deleteSingleItemsQuestionsSpreadsheet",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/submitted_questions": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new submitted_questions item.",
        "tags": [
          "Items",
          "ItemsSubmittedQuestions"
        ],
        "operationId": "createItemsSubmittedQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSubmittedQuestions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSubmittedQuestions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSubmittedQuestions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the submitted_questions items.",
        "tags": [
          "Items",
          "ItemsSubmittedQuestions"
        ],
        "operationId": "readItemsSubmittedQuestions",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSubmittedQuestions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple submitted_questions items at the same time.",
        "tags": [
          "Items",
          "ItemsSubmittedQuestions"
        ],
        "operationId": "updateItemsSubmittedQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSubmittedQuestions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSubmittedQuestions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSubmittedQuestions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing submitted_questions items.",
        "tags": [
          "Items",
          "ItemsSubmittedQuestions"
        ],
        "operationId": "deleteItemsSubmittedQuestions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/submitted_questions/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single submitted_questions item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSubmittedQuestions"
        ],
        "operationId": "readSingleItemsSubmittedQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSubmittedQuestions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing submitted_questions item.",
        "tags": [
          "Items",
          "ItemsSubmittedQuestions"
        ],
        "operationId": "updateSingleItemsSubmittedQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSubmittedQuestions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSubmittedQuestions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing submitted_questions item.",
        "tags": [
          "Items",
          "ItemsSubmittedQuestions"
        ],
        "operationId": "deleteSingleItemsSubmittedQuestions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/q_spreadsheet_scoring_items": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new q_spreadsheet_scoring_items item.",
        "tags": [
          "Items",
          "ItemsQSpreadsheetScoringItems"
        ],
        "operationId": "createItemsQSpreadsheetScoringItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQSpreadsheetScoringItems"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQSpreadsheetScoringItems"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQSpreadsheetScoringItems"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the q_spreadsheet_scoring_items items.",
        "tags": [
          "Items",
          "ItemsQSpreadsheetScoringItems"
        ],
        "operationId": "readItemsQSpreadsheetScoringItems",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQSpreadsheetScoringItems"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple q_spreadsheet_scoring_items items at the same time.",
        "tags": [
          "Items",
          "ItemsQSpreadsheetScoringItems"
        ],
        "operationId": "updateItemsQSpreadsheetScoringItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQSpreadsheetScoringItems"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQSpreadsheetScoringItems"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQSpreadsheetScoringItems"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing q_spreadsheet_scoring_items items.",
        "tags": [
          "Items",
          "ItemsQSpreadsheetScoringItems"
        ],
        "operationId": "deleteItemsQSpreadsheetScoringItems",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/q_spreadsheet_scoring_items/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single q_spreadsheet_scoring_items item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQSpreadsheetScoringItems"
        ],
        "operationId": "readSingleItemsQSpreadsheetScoringItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQSpreadsheetScoringItems"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing q_spreadsheet_scoring_items item.",
        "tags": [
          "Items",
          "ItemsQSpreadsheetScoringItems"
        ],
        "operationId": "updateSingleItemsQSpreadsheetScoringItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQSpreadsheetScoringItems"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQSpreadsheetScoringItems"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing q_spreadsheet_scoring_items item.",
        "tags": [
          "Items",
          "ItemsQSpreadsheetScoringItems"
        ],
        "operationId": "deleteSingleItemsQSpreadsheetScoringItems",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/textbooks": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new textbooks item.",
        "tags": [
          "Items",
          "ItemsTextbooks"
        ],
        "operationId": "createItemsTextbooks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsTextbooks"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsTextbooks"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsTextbooks"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the textbooks items.",
        "tags": [
          "Items",
          "ItemsTextbooks"
        ],
        "operationId": "readItemsTextbooks",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsTextbooks"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple textbooks items at the same time.",
        "tags": [
          "Items",
          "ItemsTextbooks"
        ],
        "operationId": "updateItemsTextbooks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsTextbooks"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsTextbooks"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsTextbooks"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing textbooks items.",
        "tags": [
          "Items",
          "ItemsTextbooks"
        ],
        "operationId": "deleteItemsTextbooks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/textbooks/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single textbooks item by unique identifier.",
        "tags": [
          "Items",
          "ItemsTextbooks"
        ],
        "operationId": "readSingleItemsTextbooks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsTextbooks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing textbooks item.",
        "tags": [
          "Items",
          "ItemsTextbooks"
        ],
        "operationId": "updateSingleItemsTextbooks",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsTextbooks"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsTextbooks"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing textbooks item.",
        "tags": [
          "Items",
          "ItemsTextbooks"
        ],
        "operationId": "deleteSingleItemsTextbooks",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/articles": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new articles item.",
        "tags": [
          "Items",
          "ItemsArticles"
        ],
        "operationId": "createItemsArticles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsArticles"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsArticles"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsArticles"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the articles items.",
        "tags": [
          "Items",
          "ItemsArticles"
        ],
        "operationId": "readItemsArticles",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsArticles"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple articles items at the same time.",
        "tags": [
          "Items",
          "ItemsArticles"
        ],
        "operationId": "updateItemsArticles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsArticles"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsArticles"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsArticles"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing articles items.",
        "tags": [
          "Items",
          "ItemsArticles"
        ],
        "operationId": "deleteItemsArticles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/articles/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single articles item by unique identifier.",
        "tags": [
          "Items",
          "ItemsArticles"
        ],
        "operationId": "readSingleItemsArticles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsArticles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing articles item.",
        "tags": [
          "Items",
          "ItemsArticles"
        ],
        "operationId": "updateSingleItemsArticles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsArticles"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsArticles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing articles item.",
        "tags": [
          "Items",
          "ItemsArticles"
        ],
        "operationId": "deleteSingleItemsArticles",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/questions_fill_in_blank": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new questions_fill_in_blank item.",
        "tags": [
          "Items",
          "ItemsQuestionsFillinBlank"
        ],
        "operationId": "createItemsQuestionsFillinBlank",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionsFillinBlank"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionsFillinBlank"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionsFillinBlank"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the questions_fill_in_blank items.",
        "tags": [
          "Items",
          "ItemsQuestionsFillinBlank"
        ],
        "operationId": "readItemsQuestionsFillinBlank",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionsFillinBlank"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple questions_fill_in_blank items at the same time.",
        "tags": [
          "Items",
          "ItemsQuestionsFillinBlank"
        ],
        "operationId": "updateItemsQuestionsFillinBlank",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionsFillinBlank"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionsFillinBlank"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionsFillinBlank"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing questions_fill_in_blank items.",
        "tags": [
          "Items",
          "ItemsQuestionsFillinBlank"
        ],
        "operationId": "deleteItemsQuestionsFillinBlank",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/questions_fill_in_blank/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single questions_fill_in_blank item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionsFillinBlank"
        ],
        "operationId": "readSingleItemsQuestionsFillinBlank",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionsFillinBlank"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing questions_fill_in_blank item.",
        "tags": [
          "Items",
          "ItemsQuestionsFillinBlank"
        ],
        "operationId": "updateSingleItemsQuestionsFillinBlank",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQuestionsFillinBlank"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionsFillinBlank"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing questions_fill_in_blank item.",
        "tags": [
          "Items",
          "ItemsQuestionsFillinBlank"
        ],
        "operationId": "deleteSingleItemsQuestionsFillinBlank",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/q_fill_in_blank_answers": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new q_fill_in_blank_answers item.",
        "tags": [
          "Items",
          "ItemsQFillinBlankAnswers"
        ],
        "operationId": "createItemsQFillinBlankAnswers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQFillinBlankAnswers"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQFillinBlankAnswers"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQFillinBlankAnswers"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the q_fill_in_blank_answers items.",
        "tags": [
          "Items",
          "ItemsQFillinBlankAnswers"
        ],
        "operationId": "readItemsQFillinBlankAnswers",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQFillinBlankAnswers"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple q_fill_in_blank_answers items at the same time.",
        "tags": [
          "Items",
          "ItemsQFillinBlankAnswers"
        ],
        "operationId": "updateItemsQFillinBlankAnswers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQFillinBlankAnswers"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQFillinBlankAnswers"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQFillinBlankAnswers"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing q_fill_in_blank_answers items.",
        "tags": [
          "Items",
          "ItemsQFillinBlankAnswers"
        ],
        "operationId": "deleteItemsQFillinBlankAnswers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/q_fill_in_blank_answers/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single q_fill_in_blank_answers item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQFillinBlankAnswers"
        ],
        "operationId": "readSingleItemsQFillinBlankAnswers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQFillinBlankAnswers"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing q_fill_in_blank_answers item.",
        "tags": [
          "Items",
          "ItemsQFillinBlankAnswers"
        ],
        "operationId": "updateSingleItemsQFillinBlankAnswers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQFillinBlankAnswers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQFillinBlankAnswers"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing q_fill_in_blank_answers item.",
        "tags": [
          "Items",
          "ItemsQFillinBlankAnswers"
        ],
        "operationId": "deleteSingleItemsQFillinBlankAnswers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/q_mc_single": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new q_mc_single item.",
        "tags": [
          "Items",
          "ItemsQMcSingle"
        ],
        "operationId": "createItemsQMcSingle",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQMcSingle"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQMcSingle"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQMcSingle"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the q_mc_single items.",
        "tags": [
          "Items",
          "ItemsQMcSingle"
        ],
        "operationId": "readItemsQMcSingle",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQMcSingle"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple q_mc_single items at the same time.",
        "tags": [
          "Items",
          "ItemsQMcSingle"
        ],
        "operationId": "updateItemsQMcSingle",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQMcSingle"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQMcSingle"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQMcSingle"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing q_mc_single items.",
        "tags": [
          "Items",
          "ItemsQMcSingle"
        ],
        "operationId": "deleteItemsQMcSingle",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/q_mc_single/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single q_mc_single item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQMcSingle"
        ],
        "operationId": "readSingleItemsQMcSingle",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQMcSingle"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing q_mc_single item.",
        "tags": [
          "Items",
          "ItemsQMcSingle"
        ],
        "operationId": "updateSingleItemsQMcSingle",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQMcSingle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQMcSingle"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing q_mc_single item.",
        "tags": [
          "Items",
          "ItemsQMcSingle"
        ],
        "operationId": "deleteSingleItemsQMcSingle",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/q_spreadsheet_scoring_groups": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new q_spreadsheet_scoring_groups item.",
        "tags": [
          "Items",
          "ItemsQSpreadsheetScoringGroups"
        ],
        "operationId": "createItemsQSpreadsheetScoringGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQSpreadsheetScoringGroups"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQSpreadsheetScoringGroups"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQSpreadsheetScoringGroups"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the q_spreadsheet_scoring_groups items.",
        "tags": [
          "Items",
          "ItemsQSpreadsheetScoringGroups"
        ],
        "operationId": "readItemsQSpreadsheetScoringGroups",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQSpreadsheetScoringGroups"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple q_spreadsheet_scoring_groups items at the same time.",
        "tags": [
          "Items",
          "ItemsQSpreadsheetScoringGroups"
        ],
        "operationId": "updateItemsQSpreadsheetScoringGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQSpreadsheetScoringGroups"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQSpreadsheetScoringGroups"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQSpreadsheetScoringGroups"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing q_spreadsheet_scoring_groups items.",
        "tags": [
          "Items",
          "ItemsQSpreadsheetScoringGroups"
        ],
        "operationId": "deleteItemsQSpreadsheetScoringGroups",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/q_spreadsheet_scoring_groups/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single q_spreadsheet_scoring_groups item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQSpreadsheetScoringGroups"
        ],
        "operationId": "readSingleItemsQSpreadsheetScoringGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQSpreadsheetScoringGroups"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing q_spreadsheet_scoring_groups item.",
        "tags": [
          "Items",
          "ItemsQSpreadsheetScoringGroups"
        ],
        "operationId": "updateSingleItemsQSpreadsheetScoringGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQSpreadsheetScoringGroups"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQSpreadsheetScoringGroups"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing q_spreadsheet_scoring_groups item.",
        "tags": [
          "Items",
          "ItemsQSpreadsheetScoringGroups"
        ],
        "operationId": "deleteSingleItemsQSpreadsheetScoringGroups",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/questions_fill_in_blank_1": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new questions_fill_in_blank_1 item.",
        "tags": [
          "Items",
          "ItemsQuestionsFillinBlank1"
        ],
        "operationId": "createItemsQuestionsFillinBlank1",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionsFillinBlank1"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionsFillinBlank1"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionsFillinBlank1"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the questions_fill_in_blank_1 items.",
        "tags": [
          "Items",
          "ItemsQuestionsFillinBlank1"
        ],
        "operationId": "readItemsQuestionsFillinBlank1",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionsFillinBlank1"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple questions_fill_in_blank_1 items at the same time.",
        "tags": [
          "Items",
          "ItemsQuestionsFillinBlank1"
        ],
        "operationId": "updateItemsQuestionsFillinBlank1",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionsFillinBlank1"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionsFillinBlank1"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionsFillinBlank1"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing questions_fill_in_blank_1 items.",
        "tags": [
          "Items",
          "ItemsQuestionsFillinBlank1"
        ],
        "operationId": "deleteItemsQuestionsFillinBlank1",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/questions_fill_in_blank_1/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single questions_fill_in_blank_1 item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionsFillinBlank1"
        ],
        "operationId": "readSingleItemsQuestionsFillinBlank1",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionsFillinBlank1"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing questions_fill_in_blank_1 item.",
        "tags": [
          "Items",
          "ItemsQuestionsFillinBlank1"
        ],
        "operationId": "updateSingleItemsQuestionsFillinBlank1",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQuestionsFillinBlank1"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionsFillinBlank1"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing questions_fill_in_blank_1 item.",
        "tags": [
          "Items",
          "ItemsQuestionsFillinBlank1"
        ],
        "operationId": "deleteSingleItemsQuestionsFillinBlank1",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/submitted_paper_chapters": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new submitted_paper_chapters item.",
        "tags": [
          "Items",
          "ItemsSubmittedPaperChapters"
        ],
        "operationId": "createItemsSubmittedPaperChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSubmittedPaperChapters"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSubmittedPaperChapters"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSubmittedPaperChapters"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the submitted_paper_chapters items.",
        "tags": [
          "Items",
          "ItemsSubmittedPaperChapters"
        ],
        "operationId": "readItemsSubmittedPaperChapters",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSubmittedPaperChapters"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple submitted_paper_chapters items at the same time.",
        "tags": [
          "Items",
          "ItemsSubmittedPaperChapters"
        ],
        "operationId": "updateItemsSubmittedPaperChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsSubmittedPaperChapters"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsSubmittedPaperChapters"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSubmittedPaperChapters"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing submitted_paper_chapters items.",
        "tags": [
          "Items",
          "ItemsSubmittedPaperChapters"
        ],
        "operationId": "deleteItemsSubmittedPaperChapters",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/submitted_paper_chapters/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single submitted_paper_chapters item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSubmittedPaperChapters"
        ],
        "operationId": "readSingleItemsSubmittedPaperChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSubmittedPaperChapters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing submitted_paper_chapters item.",
        "tags": [
          "Items",
          "ItemsSubmittedPaperChapters"
        ],
        "operationId": "updateSingleItemsSubmittedPaperChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsSubmittedPaperChapters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsSubmittedPaperChapters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing submitted_paper_chapters item.",
        "tags": [
          "Items",
          "ItemsSubmittedPaperChapters"
        ],
        "operationId": "deleteSingleItemsSubmittedPaperChapters",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/papers": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new papers item.",
        "tags": [
          "Items",
          "ItemsPapers"
        ],
        "operationId": "createItemsPapers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPapers"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPapers"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPapers"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the papers items.",
        "tags": [
          "Items",
          "ItemsPapers"
        ],
        "operationId": "readItemsPapers",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPapers"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple papers items at the same time.",
        "tags": [
          "Items",
          "ItemsPapers"
        ],
        "operationId": "updateItemsPapers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPapers"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPapers"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPapers"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing papers items.",
        "tags": [
          "Items",
          "ItemsPapers"
        ],
        "operationId": "deleteItemsPapers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/papers/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single papers item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPapers"
        ],
        "operationId": "readSingleItemsPapers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPapers"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing papers item.",
        "tags": [
          "Items",
          "ItemsPapers"
        ],
        "operationId": "updateSingleItemsPapers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPapers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPapers"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing papers item.",
        "tags": [
          "Items",
          "ItemsPapers"
        ],
        "operationId": "deleteSingleItemsPapers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/practice_sessions": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new practice_sessions item.",
        "tags": [
          "Items",
          "ItemsPracticeSessions"
        ],
        "operationId": "createItemsPracticeSessions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPracticeSessions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPracticeSessions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPracticeSessions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the practice_sessions items.",
        "tags": [
          "Items",
          "ItemsPracticeSessions"
        ],
        "operationId": "readItemsPracticeSessions",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPracticeSessions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple practice_sessions items at the same time.",
        "tags": [
          "Items",
          "ItemsPracticeSessions"
        ],
        "operationId": "updateItemsPracticeSessions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPracticeSessions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPracticeSessions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPracticeSessions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing practice_sessions items.",
        "tags": [
          "Items",
          "ItemsPracticeSessions"
        ],
        "operationId": "deleteItemsPracticeSessions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/practice_sessions/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single practice_sessions item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPracticeSessions"
        ],
        "operationId": "readSingleItemsPracticeSessions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPracticeSessions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing practice_sessions item.",
        "tags": [
          "Items",
          "ItemsPracticeSessions"
        ],
        "operationId": "updateSingleItemsPracticeSessions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPracticeSessions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPracticeSessions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing practice_sessions item.",
        "tags": [
          "Items",
          "ItemsPracticeSessions"
        ],
        "operationId": "deleteSingleItemsPracticeSessions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/paper_section_strategies": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new paper_section_strategies item.",
        "tags": [
          "Items",
          "ItemsPaperSectionStrategies"
        ],
        "operationId": "createItemsPaperSectionStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperSectionStrategies"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperSectionStrategies"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperSectionStrategies"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the paper_section_strategies items.",
        "tags": [
          "Items",
          "ItemsPaperSectionStrategies"
        ],
        "operationId": "readItemsPaperSectionStrategies",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPaperSectionStrategies"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple paper_section_strategies items at the same time.",
        "tags": [
          "Items",
          "ItemsPaperSectionStrategies"
        ],
        "operationId": "updateItemsPaperSectionStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperSectionStrategies"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperSectionStrategies"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperSectionStrategies"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing paper_section_strategies items.",
        "tags": [
          "Items",
          "ItemsPaperSectionStrategies"
        ],
        "operationId": "deleteItemsPaperSectionStrategies",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/paper_section_strategies/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single paper_section_strategies item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPaperSectionStrategies"
        ],
        "operationId": "readSingleItemsPaperSectionStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperSectionStrategies"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing paper_section_strategies item.",
        "tags": [
          "Items",
          "ItemsPaperSectionStrategies"
        ],
        "operationId": "updateSingleItemsPaperSectionStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPaperSectionStrategies"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperSectionStrategies"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing paper_section_strategies item.",
        "tags": [
          "Items",
          "ItemsPaperSectionStrategies"
        ],
        "operationId": "deleteSingleItemsPaperSectionStrategies",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/exercises_students": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new exercises_students item.",
        "tags": [
          "Items",
          "ItemsExercisesStudents"
        ],
        "operationId": "createItemsExercisesStudents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsExercisesStudents"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsExercisesStudents"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsExercisesStudents"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the exercises_students items.",
        "tags": [
          "Items",
          "ItemsExercisesStudents"
        ],
        "operationId": "readItemsExercisesStudents",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsExercisesStudents"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple exercises_students items at the same time.",
        "tags": [
          "Items",
          "ItemsExercisesStudents"
        ],
        "operationId": "updateItemsExercisesStudents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsExercisesStudents"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsExercisesStudents"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsExercisesStudents"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing exercises_students items.",
        "tags": [
          "Items",
          "ItemsExercisesStudents"
        ],
        "operationId": "deleteItemsExercisesStudents",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/exercises_students/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single exercises_students item by unique identifier.",
        "tags": [
          "Items",
          "ItemsExercisesStudents"
        ],
        "operationId": "readSingleItemsExercisesStudents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsExercisesStudents"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing exercises_students item.",
        "tags": [
          "Items",
          "ItemsExercisesStudents"
        ],
        "operationId": "updateSingleItemsExercisesStudents",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsExercisesStudents"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsExercisesStudents"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing exercises_students item.",
        "tags": [
          "Items",
          "ItemsExercisesStudents"
        ],
        "operationId": "deleteSingleItemsExercisesStudents",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/paper_sections": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new paper_sections item.",
        "tags": [
          "Items",
          "ItemsPaperSections"
        ],
        "operationId": "createItemsPaperSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperSections"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperSections"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperSections"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the paper_sections items.",
        "tags": [
          "Items",
          "ItemsPaperSections"
        ],
        "operationId": "readItemsPaperSections",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPaperSections"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple paper_sections items at the same time.",
        "tags": [
          "Items",
          "ItemsPaperSections"
        ],
        "operationId": "updateItemsPaperSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperSections"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperSections"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperSections"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing paper_sections items.",
        "tags": [
          "Items",
          "ItemsPaperSections"
        ],
        "operationId": "deleteItemsPaperSections",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/paper_sections/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single paper_sections item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPaperSections"
        ],
        "operationId": "readSingleItemsPaperSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperSections"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing paper_sections item.",
        "tags": [
          "Items",
          "ItemsPaperSections"
        ],
        "operationId": "updateSingleItemsPaperSections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPaperSections"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperSections"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing paper_sections item.",
        "tags": [
          "Items",
          "ItemsPaperSections"
        ],
        "operationId": "deleteSingleItemsPaperSections",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/exercises": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new exercises item.",
        "tags": [
          "Items",
          "ItemsExercises"
        ],
        "operationId": "createItemsExercises",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsExercises"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsExercises"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsExercises"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the exercises items.",
        "tags": [
          "Items",
          "ItemsExercises"
        ],
        "operationId": "readItemsExercises",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsExercises"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple exercises items at the same time.",
        "tags": [
          "Items",
          "ItemsExercises"
        ],
        "operationId": "updateItemsExercises",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsExercises"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsExercises"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsExercises"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing exercises items.",
        "tags": [
          "Items",
          "ItemsExercises"
        ],
        "operationId": "deleteItemsExercises",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/exercises/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single exercises item by unique identifier.",
        "tags": [
          "Items",
          "ItemsExercises"
        ],
        "operationId": "readSingleItemsExercises",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsExercises"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing exercises item.",
        "tags": [
          "Items",
          "ItemsExercises"
        ],
        "operationId": "updateSingleItemsExercises",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsExercises"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsExercises"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing exercises item.",
        "tags": [
          "Items",
          "ItemsExercises"
        ],
        "operationId": "deleteSingleItemsExercises",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/paper_strategies": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new paper_strategies item.",
        "tags": [
          "Items",
          "ItemsPaperStrategies"
        ],
        "operationId": "createItemsPaperStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperStrategies"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperStrategies"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperStrategies"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the paper_strategies items.",
        "tags": [
          "Items",
          "ItemsPaperStrategies"
        ],
        "operationId": "readItemsPaperStrategies",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPaperStrategies"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple paper_strategies items at the same time.",
        "tags": [
          "Items",
          "ItemsPaperStrategies"
        ],
        "operationId": "updateItemsPaperStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperStrategies"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperStrategies"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperStrategies"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing paper_strategies items.",
        "tags": [
          "Items",
          "ItemsPaperStrategies"
        ],
        "operationId": "deleteItemsPaperStrategies",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/paper_strategies/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single paper_strategies item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPaperStrategies"
        ],
        "operationId": "readSingleItemsPaperStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperStrategies"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing paper_strategies item.",
        "tags": [
          "Items",
          "ItemsPaperStrategies"
        ],
        "operationId": "updateSingleItemsPaperStrategies",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPaperStrategies"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperStrategies"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing paper_strategies item.",
        "tags": [
          "Items",
          "ItemsPaperStrategies"
        ],
        "operationId": "deleteSingleItemsPaperStrategies",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/paper_instances": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new paper_instances item.",
        "tags": [
          "Items",
          "ItemsPaperInstances"
        ],
        "operationId": "createItemsPaperInstances",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperInstances"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperInstances"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperInstances"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the paper_instances items.",
        "tags": [
          "Items",
          "ItemsPaperInstances"
        ],
        "operationId": "readItemsPaperInstances",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPaperInstances"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple paper_instances items at the same time.",
        "tags": [
          "Items",
          "ItemsPaperInstances"
        ],
        "operationId": "updateItemsPaperInstances",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperInstances"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperInstances"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperInstances"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing paper_instances items.",
        "tags": [
          "Items",
          "ItemsPaperInstances"
        ],
        "operationId": "deleteItemsPaperInstances",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/paper_instances/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single paper_instances item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPaperInstances"
        ],
        "operationId": "readSingleItemsPaperInstances",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperInstances"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing paper_instances item.",
        "tags": [
          "Items",
          "ItemsPaperInstances"
        ],
        "operationId": "updateSingleItemsPaperInstances",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPaperInstances"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperInstances"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing paper_instances item.",
        "tags": [
          "Items",
          "ItemsPaperInstances"
        ],
        "operationId": "deleteSingleItemsPaperInstances",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/paper_sections_questions": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new paper_sections_questions item.",
        "tags": [
          "Items",
          "ItemsPaperSectionsQuestions"
        ],
        "operationId": "createItemsPaperSectionsQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperSectionsQuestions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperSectionsQuestions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperSectionsQuestions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the paper_sections_questions items.",
        "tags": [
          "Items",
          "ItemsPaperSectionsQuestions"
        ],
        "operationId": "readItemsPaperSectionsQuestions",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsPaperSectionsQuestions"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple paper_sections_questions items at the same time.",
        "tags": [
          "Items",
          "ItemsPaperSectionsQuestions"
        ],
        "operationId": "updateItemsPaperSectionsQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsPaperSectionsQuestions"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsPaperSectionsQuestions"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsPaperSectionsQuestions"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing paper_sections_questions items.",
        "tags": [
          "Items",
          "ItemsPaperSectionsQuestions"
        ],
        "operationId": "deleteItemsPaperSectionsQuestions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/paper_sections_questions/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single paper_sections_questions item by unique identifier.",
        "tags": [
          "Items",
          "ItemsPaperSectionsQuestions"
        ],
        "operationId": "readSingleItemsPaperSectionsQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperSectionsQuestions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing paper_sections_questions item.",
        "tags": [
          "Items",
          "ItemsPaperSectionsQuestions"
        ],
        "operationId": "updateSingleItemsPaperSectionsQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsPaperSectionsQuestions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsPaperSectionsQuestions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing paper_sections_questions item.",
        "tags": [
          "Items",
          "ItemsPaperSectionsQuestions"
        ],
        "operationId": "deleteSingleItemsPaperSectionsQuestions",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/question_results": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new question_results item.",
        "tags": [
          "Items",
          "ItemsQuestionResults"
        ],
        "operationId": "createItemsQuestionResults",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionResults"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionResults"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionResults"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the question_results items.",
        "tags": [
          "Items",
          "ItemsQuestionResults"
        ],
        "operationId": "readItemsQuestionResults",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionResults"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple question_results items at the same time.",
        "tags": [
          "Items",
          "ItemsQuestionResults"
        ],
        "operationId": "updateItemsQuestionResults",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsQuestionResults"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsQuestionResults"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionResults"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing question_results items.",
        "tags": [
          "Items",
          "ItemsQuestionResults"
        ],
        "operationId": "deleteItemsQuestionResults",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/question_results/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single question_results item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionResults"
        ],
        "operationId": "readSingleItemsQuestionResults",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionResults"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing question_results item.",
        "tags": [
          "Items",
          "ItemsQuestionResults"
        ],
        "operationId": "updateSingleItemsQuestionResults",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsQuestionResults"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsQuestionResults"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing question_results item.",
        "tags": [
          "Items",
          "ItemsQuestionResults"
        ],
        "operationId": "deleteSingleItemsQuestionResults",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    },
    "/items/courses_teachers": {
      "post": {
        "summary": "Create an Item",
        "description": "Create a new courses_teachers item.",
        "tags": [
          "Items",
          "ItemsCoursesTeachers"
        ],
        "operationId": "createItemsCoursesTeachers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCoursesTeachers"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCoursesTeachers"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsCoursesTeachers"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "List Items",
        "description": "List the courses_teachers items.",
        "tags": [
          "Items",
          "ItemsCoursesTeachers"
        ],
        "operationId": "readItemsCoursesTeachers",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsCoursesTeachers"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/x-metadata"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update Multiple Items",
        "description": "Update multiple courses_teachers items at the same time.",
        "tags": [
          "Items",
          "ItemsCoursesTeachers"
        ],
        "operationId": "updateItemsCoursesTeachers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemsCoursesTeachers"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/ItemsCoursesTeachers"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemsCoursesTeachers"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Multiple Items",
        "description": "Delete multiple existing courses_teachers items.",
        "tags": [
          "Items",
          "ItemsCoursesTeachers"
        ],
        "operationId": "deleteItemsCoursesTeachers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "parameters": []
      }
    },
    "/items/courses_teachers/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single courses_teachers item by unique identifier.",
        "tags": [
          "Items",
          "ItemsCoursesTeachers"
        ],
        "operationId": "readSingleItemsCoursesTeachers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Version"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCoursesTeachers"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update an Item",
        "description": "Update an existing courses_teachers item.",
        "tags": [
          "Items",
          "ItemsCoursesTeachers"
        ],
        "operationId": "updateSingleItemsCoursesTeachers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ItemsCoursesTeachers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/ItemsCoursesTeachers"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete an Item",
        "description": "Delete an existing courses_teachers item.",
        "tags": [
          "Items",
          "ItemsCoursesTeachers"
        ],
        "operationId": "deleteSingleItemsCoursesTeachers",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Index of the item.",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "Incremental index of the item.",
                  "example": 1
                },
                {
                  "type": "string",
                  "description": "Unique identifier of the item.",
                  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Assets",
      "description": "Image typed files can be dynamically resized and transformed to fit any need."
    },
    {
      "name": "Authentication",
      "description": "All data within the platform is private by default. The public role can be configured to expose data without authentication, or you can pass an access token to the API to access private data."
    },
    {
      "name": "Schema",
      "description": "Retrieve and update the schema of an instance.",
      "x-authentication": "admin",
      "x-schemas": [
        "Schema",
        "Diff"
      ]
    },
    {
      "name": "Server",
      "description": "Access to where Directus runs. Allows you to make sure your server has everything needed to run the platform, and check what kind of latency we're dealing with."
    },
    {
      "name": "Utilities",
      "description": "Directus comes with various utility endpoints you can use to simplify your development flow.",
      "x-authentication": "user",
      "x-schemas": [
        "Files",
        "Folders",
        "Users",
        "Roles"
      ]
    },
    {
      "name": "Roles",
      "description": "Roles are groups of users that share permissions.",
      "x-collection": "directus_roles"
    },
    {
      "name": "Revisions",
      "description": "Revisions are individual changes to items made. Directus keeps track of changes made, so you're able to revert to a previous state at will.",
      "x-collection": "directus_revisions"
    },
    {
      "name": "Folders",
      "description": "Group files by virtual folders.",
      "x-collection": "directus_folders"
    },
    {
      "name": "Activity",
      "description": "All events that happen within Directus are tracked and stored in the activities collection. This gives you full accountability over everything that happens.",
      "x-collection": "directus_activity"
    },
    {
      "name": "Fields",
      "description": "Fields are individual pieces of content within an item. They are mapped to columns in the database.",
      "x-collection": "directus_fields"
    },
    {
      "name": "Files",
      "description": "Files can be saved in any given location. Directus has a powerful assets endpoint that can be used to generate thumbnails for images on the fly.",
      "x-collection": "directus_files"
    },
    {
      "name": "Settings",
      "description": "Settings control the way the platform works and acts.",
      "x-collection": "directus_settings"
    },
    {
      "name": "Permissions",
      "description": "Permissions control who has access to what and when.",
      "x-collection": "directus_permissions"
    },
    {
      "name": "Relations",
      "description": "What data is linked to what other data. Allows you to assign authors to articles, products to sales, and whatever other structures you can think of.",
      "x-collection": "directus_relations"
    },
    {
      "name": "Presets",
      "description": "Presets hold the preferences of individual users of the platform. This allows Directus to show and maintain custom item listings for users of the app.",
      "x-collection": "directus_presets"
    },
    {
      "name": "Flows",
      "description": "Flows enable custom, event-driven data processing and task automation.",
      "x-collection": "directus_flows"
    },
    {
      "name": "Operations",
      "description": "Operations are the building blocks within Data Flows.",
      "x-collection": "directus_operations"
    },
    {
      "name": "Collections",
      "description": "Collections are the individual collections of items, similar to tables in a database. Changes to collections will alter the schema of the database.",
      "x-collection": "directus_collections"
    },
    {
      "name": "Users",
      "description": "Users are what gives you access to the data.",
      "x-collection": "directus_users"
    },
    {
      "name": "ItemsPaperPrototypes",
      "x-collection": "paper_prototypes"
    },
    {
      "name": "Extensions",
      "description": "Directus can easily be extended through the addition of several types of extensions, including layouts, interfaces, and modules.",
      "x-collection": "directus_extensions"
    },
    {
      "name": "Webhooks",
      "description": "Webhooks.",
      "x-collection": "directus_webhooks"
    },
    {
      "name": "Comments",
      "description": "Comments can be added to items.",
      "x-collection": "directus_comments"
    },
    {
      "name": "Versions",
      "description": "Enables users to create unpublished copies of an item, modify them independently from the main version, and promote them to become the new main version when ready.",
      "x-collection": "directus_versions"
    },
    {
      "name": "ItemsCourses",
      "x-collection": "courses"
    },
    {
      "name": "ItemsClasses",
      "x-collection": "classes",
      "description": "这里是班级管理模块，每个学生只能属于一个班级。"
    },
    {
      "name": "ItemsInstitutions",
      "x-collection": "institutions"
    },
    {
      "name": "ItemsPaperGenStrategies",
      "x-collection": "paper_gen_strategies"
    },
    {
      "name": "ItemsExams",
      "x-collection": "exams",
      "description": "exam直接对应学生而非先找班级再找学生，少一层套娃；"
    },
    {
      "name": "ItemsKnowledgePoints",
      "x-collection": "knowledge_points"
    },
    {
      "name": "ItemsTeachers",
      "x-collection": "teachers"
    },
    {
      "name": "ItemsStudents",
      "x-collection": "students"
    },
    {
      "name": "ItemsArticlesKnowledgePoints",
      "x-collection": "articles_knowledge_points"
    },
    {
      "name": "ItemsKnowledgePointsKnowledgePoints",
      "x-collection": "knowledge_points_knowledge_points"
    },
    {
      "name": "ItemsNotices",
      "x-collection": "notices"
    },
    {
      "name": "ItemsQuestionPointAssignStrategies",
      "x-collection": "question_point_assign_strategies"
    },
    {
      "name": "ItemsQuestionsSections",
      "x-collection": "questions_sections"
    },
    {
      "name": "ItemsArticlesSections",
      "x-collection": "articles_sections"
    },
    {
      "name": "ItemsPaperGenStrategyItems",
      "x-collection": "paper_gen_strategy_items"
    },
    {
      "name": "ItemsPaperPrototypeChapters",
      "x-collection": "paper_prototype_chapters"
    },
    {
      "name": "ItemsPaperPrototypeChaptersQuestions",
      "x-collection": "paper_prototype_chapters_questions"
    },
    {
      "name": "ItemsQuestionsKnowledgePoints",
      "x-collection": "questions_knowledge_points"
    },
    {
      "name": "ItemsSectionsKnowledgePoints",
      "x-collection": "sections_knowledge_points"
    },
    {
      "name": "ItemsPaperGenStrategyChapters",
      "x-collection": "paper_gen_strategy_chapters"
    },
    {
      "name": "ItemsSections",
      "x-collection": "sections"
    },
    {
      "name": "ItemsPaperPrototypeChaptersQuestionGroups",
      "x-collection": "paper_prototype_chapters_question_groups"
    },
    {
      "name": "ItemsQuestions",
      "x-collection": "questions"
    },
    {
      "name": "ItemsSubmittedPapers",
      "x-collection": "submitted_papers",
      "description": "学生提交的试卷有两个来源，1是试卷原型，2是组卷策略。submitted papers的结构应当与papers表一致，也就是paper → paper_chapter → question。"
    },
    {
      "name": "ItemsExamsStudents",
      "x-collection": "exams_students"
    },
    {
      "name": "ItemsQuestionGroups",
      "x-collection": "question_groups"
    },
    {
      "name": "ItemsSubjects",
      "x-collection": "subjects"
    },
    {
      "name": "ItemsQMcFlexible",
      "x-collection": "q_mc_flexible"
    },
    {
      "name": "ItemsQMc",
      "x-collection": "q_mc"
    },
    {
      "name": "ItemsQMcMulti",
      "x-collection": "q_mc_multi"
    },
    {
      "name": "ItemsQMcBinary",
      "x-collection": "q_mc_binary"
    },
    {
      "name": "ItemsSubmittedExams",
      "x-collection": "submitted_exams"
    },
    {
      "name": "ItemsQuestionsSpreadsheet",
      "x-collection": "questions_spreadsheet"
    },
    {
      "name": "ItemsSubmittedQuestions",
      "x-collection": "submitted_questions"
    },
    {
      "name": "ItemsQSpreadsheetScoringItems",
      "x-collection": "q_spreadsheet_scoring_items"
    },
    {
      "name": "ItemsTextbooks",
      "x-collection": "textbooks"
    },
    {
      "name": "ItemsArticles",
      "x-collection": "articles"
    },
    {
      "name": "ItemsQuestionsFillinBlank",
      "x-collection": "questions_fill_in_blank"
    },
    {
      "name": "ItemsQFillinBlankAnswers",
      "x-collection": "q_fill_in_blank_answers"
    },
    {
      "name": "ItemsQMcSingle",
      "x-collection": "q_mc_single"
    },
    {
      "name": "ItemsQSpreadsheetScoringGroups",
      "x-collection": "q_spreadsheet_scoring_groups"
    },
    {
      "name": "ItemsQuestionsFillinBlank1",
      "x-collection": "questions_fill_in_blank_1"
    },
    {
      "name": "ItemsSubmittedPaperChapters",
      "x-collection": "submitted_paper_chapters"
    },
    {
      "name": "ItemsPapers",
      "x-collection": "papers",
      "description": "改版的简化的试卷。"
    },
    {
      "name": "ItemsPracticeSessions",
      "x-collection": "practice_sessions"
    },
    {
      "name": "ItemsPaperSectionStrategies",
      "x-collection": "paper_section_strategies"
    },
    {
      "name": "ItemsExercisesStudents",
      "x-collection": "exercises_students"
    },
    {
      "name": "ItemsPaperSections",
      "x-collection": "paper_sections"
    },
    {
      "name": "ItemsExercises",
      "x-collection": "exercises"
    },
    {
      "name": "ItemsPaperStrategies",
      "x-collection": "paper_strategies",
      "description": "自动组卷策略"
    },
    {
      "name": "ItemsPaperInstances",
      "x-collection": "paper_instances"
    },
    {
      "name": "ItemsPaperSectionsQuestions",
      "x-collection": "paper_sections_questions"
    },
    {
      "name": "ItemsQuestionResults",
      "x-collection": "question_results"
    },
    {
      "name": "ItemsCoursesTeachers",
      "x-collection": "courses_teachers"
    }
  ],
  "components": {
    "schemas": {
      "Diff": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "diff": {
            "type": "object",
            "properties": {
              "collections": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "collection": {
                      "type": "string"
                    },
                    "diff": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              },
              "fields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "collection": {
                      "type": "string"
                    },
                    "field": {
                      "type": "string"
                    },
                    "diff": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              },
              "relations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "collection": {
                      "type": "string"
                    },
                    "field": {
                      "type": "string"
                    },
                    "related_collection": {
                      "type": "string"
                    },
                    "diff": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Files": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the file.",
            "example": "8cbb43fe-4cdf-4991-8352-c461779cec02",
            "type": "string"
          },
          "storage": {
            "description": "Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).",
            "example": "local",
            "type": "string"
          },
          "filename_disk": {
            "description": "Name of the file on disk. By default, Directus uses a random hash for the filename.",
            "example": "a88c3b72-ac58-5436-a4ec-b2858531333a.jpg",
            "type": "string"
          },
          "filename_download": {
            "description": "How you want to the file to be named when it's being downloaded.",
            "example": "avatar.jpg",
            "type": "string"
          },
          "title": {
            "description": "Title for the file. Is extracted from the filename on upload, but can be edited by the user.",
            "example": "User Avatar",
            "type": "string"
          },
          "type": {
            "description": "MIME type of the file.",
            "example": "image/jpeg",
            "type": "string"
          },
          "folder": {
            "description": "Virtual folder where this file resides in.",
            "example": null,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Folders"
              }
            ],
            "nullable": true
          },
          "uploaded_by": {
            "description": "Who uploaded the file.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "created_on": {
            "description": "When the file was created.",
            "example": "2019-12-03T00:10:15+00:00",
            "type": "string",
            "format": "date-time"
          },
          "modified_by": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "modified_on": {
            "nullable": false,
            "type": "string",
            "format": "timestamp"
          },
          "charset": {
            "description": "Character set of the file.",
            "example": "binary",
            "type": "string",
            "nullable": true
          },
          "filesize": {
            "description": "Size of the file in bytes.",
            "example": 137862,
            "type": "integer"
          },
          "width": {
            "description": "Width of the file in pixels. Only applies to images.",
            "example": 800,
            "type": "integer",
            "nullable": true
          },
          "height": {
            "description": "Height of the file in pixels. Only applies to images.",
            "example": 838,
            "type": "integer",
            "nullable": true
          },
          "duration": {
            "description": "Duration of the file in seconds. Only applies to audio and video.",
            "example": 0,
            "type": "integer",
            "nullable": true
          },
          "embed": {
            "description": "Where the file was embedded from.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "description": {
            "description": "Description for the file.",
            "type": "string",
            "nullable": true
          },
          "location": {
            "description": "Where the file was created. Is automatically populated based on Exif data for images.",
            "type": "string",
            "nullable": true
          },
          "tags": {
            "description": "Tags for the file. Is automatically populated based on Exif data for images.",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "description": "IPTC, Exif, and ICC metadata extracted from file",
            "type": "object",
            "nullable": true
          },
          "focal_point_x": {
            "nullable": true,
            "type": "integer"
          },
          "focal_point_y": {
            "nullable": true,
            "type": "integer"
          },
          "tus_id": {
            "nullable": true,
            "type": "string"
          },
          "tus_data": {
            "nullable": true
          },
          "uploaded_on": {
            "description": "When the file was last uploaded/replaced.",
            "example": "2019-12-03T00:10:15+00:00",
            "type": "string",
            "format": "date-time"
          }
        },
        "x-collection": "directus_files"
      },
      "Folders": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the folder.",
            "example": "0cf0e03d-4364-45df-b77b-ca61f61869d2",
            "type": "string"
          },
          "name": {
            "description": "Name of the folder.",
            "example": "New York",
            "type": "string"
          },
          "parent": {
            "description": "Unique identifier of the parent folder. This allows for nested folders.",
            "example": null,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Folders"
              }
            ],
            "nullable": true
          }
        },
        "x-collection": "directus_folders"
      },
      "Roles": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the role.",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426",
            "type": "string"
          },
          "name": {
            "description": "Name of the role.",
            "example": "Administrator",
            "type": "string"
          },
          "icon": {
            "description": "The role's icon.",
            "example": "verified_user",
            "type": "string"
          },
          "description": {
            "description": "Description of the role.",
            "example": "Admins have access to all managed data within the system by default",
            "type": "string",
            "nullable": true
          },
          "parent": {
            "nullable": true,
            "description": "$t:field_options.directus_roles.parent_note",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Roles"
              }
            ]
          },
          "children": {
            "nullable": true,
            "description": "$t:field_options.directus_roles.children_note",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/Roles"
                }
              ]
            }
          },
          "policies": {
            "nullable": true
          },
          "users": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/Users"
                }
              ]
            }
          }
        },
        "x-collection": "directus_roles"
      },
      "Schema": {
        "type": "object",
        "properties": {
          "version": {
            "type": "integer",
            "example": 1
          },
          "directus": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Collections"
            }
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fields"
            }
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relations"
            }
          }
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the user.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "type": "string"
          },
          "first_name": {
            "description": "First name of the user.",
            "example": "Admin",
            "type": "string"
          },
          "last_name": {
            "description": "Last name of the user.",
            "example": "User",
            "type": "string"
          },
          "email": {
            "description": "Unique email address for the user.",
            "example": "admin@example.com",
            "type": "string",
            "format": "email"
          },
          "password": {
            "description": "Password of the user.",
            "type": "string"
          },
          "location": {
            "description": "The user's location.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "title": {
            "description": "The user's title.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "description": {
            "description": "The user's description.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "tags": {
            "description": "The user's tags.",
            "example": null,
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "avatar": {
            "description": "The user's avatar.",
            "example": null,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ],
            "nullable": true
          },
          "language": {
            "description": "The user's language used in Directus.",
            "example": "en-US",
            "type": "string"
          },
          "tfa_secret": {
            "description": "The 2FA secret string that's used to generate one time passwords.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "status": {
            "description": "Status of the user.",
            "example": "active",
            "type": "string",
            "enum": [
              "active",
              "invited",
              "draft",
              "suspended",
              "deleted"
            ]
          },
          "role": {
            "description": "Unique identifier of the role of this user.",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Roles"
              }
            ]
          },
          "token": {
            "description": "Static token for the user.",
            "type": "string",
            "nullable": true
          },
          "last_access": {
            "description": "When this user used the API last.",
            "example": "2020-05-31T14:32:37Z",
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "last_page": {
            "description": "Last page that the user was on.",
            "example": "/my-project/settings/collections/a",
            "type": "string",
            "nullable": true
          },
          "provider": {
            "nullable": false,
            "type": "string"
          },
          "external_identifier": {
            "nullable": true,
            "type": "string"
          },
          "auth_data": {
            "nullable": true
          },
          "email_notifications": {
            "nullable": true,
            "type": "boolean"
          },
          "appearance": {
            "nullable": true,
            "type": "string"
          },
          "theme_dark": {
            "nullable": true,
            "type": "string"
          },
          "theme_light": {
            "nullable": true,
            "type": "string"
          },
          "theme_light_overrides": {
            "nullable": true
          },
          "theme_dark_overrides": {
            "nullable": true
          },
          "policies": {
            "nullable": true
          }
        },
        "x-collection": "directus_users"
      },
      "Query": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Control what fields are being returned in the object.",
            "example": [
              "*",
              "*.*"
            ]
          },
          "filter": {
            "type": "object",
            "example": {
              "<field>": {
                "<operator>": "<value>"
              }
            }
          },
          "search": {
            "description": "Filter by items that contain the given search query in one of their fields.",
            "type": "string"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "How to sort the returned items.",
            "example": [
              "-date_created"
            ]
          },
          "limit": {
            "type": "number",
            "description": "Set the maximum number of items that will be returned"
          },
          "offset": {
            "type": "number",
            "description": "How many items to skip when fetching data."
          },
          "page": {
            "type": "number",
            "description": "Cursor for use in pagination. Often used in combination with limit."
          },
          "deep": {
            "type": "object",
            "description": "Deep allows you to set any of the other query parameters on a nested relational dataset.",
            "example": {
              "related_articles": {
                "_limit": 3
              }
            }
          }
        }
      },
      "x-metadata": {
        "type": "object",
        "properties": {
          "total_count": {
            "description": "Returns the total item count of the collection you're querying.",
            "type": "integer"
          },
          "filter_count": {
            "description": "Returns the item count of the collection you're querying, taking the current filter/search parameters into account.",
            "type": "integer"
          }
        }
      },
      "Revisions": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the revision.",
            "example": 1,
            "type": "integer"
          },
          "activity": {
            "description": "Unique identifier for the activity record.",
            "example": 2,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/Activity"
              }
            ]
          },
          "collection": {
            "description": "Collection of the updated item.",
            "example": "articles",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "item": {
            "description": "Primary key of updated item.",
            "example": "168",
            "type": "string"
          },
          "data": {
            "description": "Copy of item state at time of update.",
            "example": {
              "author": 1,
              "body": "This is my first post",
              "featured_image": 15,
              "id": "168",
              "title": "Hello, World!"
            },
            "type": "object",
            "nullable": true
          },
          "delta": {
            "description": "Changes between the previous and the current revision.",
            "example": {
              "title": "Hello, World!"
            },
            "type": "object"
          },
          "parent": {
            "description": "If the current item was updated relationally, this is the id of the parent revision record",
            "example": null,
            "type": "integer",
            "nullable": true
          },
          "version": {
            "description": "Associated version of this revision.",
            "example": "draft",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Versions"
              }
            ]
          }
        },
        "x-collection": "directus_revisions"
      },
      "Activity": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the object.",
            "example": 2,
            "type": "integer"
          },
          "action": {
            "description": "Action that was performed.",
            "example": "update",
            "type": "string",
            "enum": [
              "create",
              "update",
              "delete",
              "login"
            ]
          },
          "user": {
            "description": "The user who performed this action.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ],
            "nullable": true
          },
          "timestamp": {
            "description": "When the action happened.",
            "example": "2019-12-05T22:52:09Z",
            "type": "string",
            "format": "date-time"
          },
          "ip": {
            "description": "The IP address of the user at the time the action took place.",
            "example": "127.0.0.1",
            "oneOf": [
              {
                "type": "string",
                "format": "ipv4"
              }
            ]
          },
          "user_agent": {
            "description": "User agent string of the browser the user used when the action took place.",
            "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/78.0.3904.108 Safari/537.36",
            "type": "string"
          },
          "collection": {
            "description": "Collection identifier in which the item resides.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "item": {
            "description": "Unique identifier for the item the action applied to. This is always a string, even for integer primary keys.",
            "example": "328",
            "type": "string"
          },
          "origin": {
            "description": "Origin of the request when the action took place.",
            "example": "https://directus.io",
            "type": "string"
          },
          "revisions": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/Revisions"
                }
              ]
            }
          }
        },
        "x-collection": "directus_activity"
      },
      "Fields": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "collection": {
            "description": "Unique name of the collection this field is in.",
            "example": "about_us",
            "type": "string"
          },
          "field": {
            "description": "Unique name of the field. Field name is unique within the collection.",
            "example": "id",
            "type": "string"
          },
          "special": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "interface": {
            "nullable": true,
            "type": "string"
          },
          "options": {
            "nullable": true
          },
          "display": {
            "nullable": true,
            "type": "string"
          },
          "display_options": {
            "nullable": true
          },
          "readonly": {
            "nullable": false,
            "type": "boolean"
          },
          "hidden": {
            "nullable": false,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "width": {
            "nullable": true,
            "type": "string"
          },
          "translations": {
            "nullable": true
          },
          "note": {
            "nullable": true,
            "type": "string"
          },
          "conditions": {
            "nullable": true
          },
          "required": {
            "nullable": true,
            "type": "boolean"
          },
          "group": {
            "nullable": true,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/Fields"
              }
            ]
          },
          "validation": {
            "nullable": true
          },
          "validation_message": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "directus_fields"
      },
      "Settings": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the setting.",
            "type": "integer",
            "example": 1
          },
          "project_name": {
            "description": "The name of the project.",
            "type": "string",
            "example": "Directus"
          },
          "project_url": {
            "description": "The url of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "project_color": {
            "description": "The brand color of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "project_logo": {
            "description": "The logo of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "public_foreground": {
            "description": "The foreground of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "public_background": {
            "description": "The background of the project.",
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "example": null,
            "nullable": true
          },
          "public_note": {
            "description": "Note rendered on the public pages of the app.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "auth_login_attempts": {
            "description": "Allowed authentication login attempts before the user's status is set to blocked.",
            "type": "integer",
            "example": 25
          },
          "auth_password_policy": {
            "description": "Authentication password policy.",
            "type": "string",
            "nullable": true
          },
          "storage_asset_transform": {
            "description": "What transformations are allowed in the assets endpoint.",
            "type": "string",
            "enum": [
              "all",
              "none",
              "presets"
            ],
            "example": "all",
            "nullable": true
          },
          "storage_asset_presets": {
            "description": "Array of allowed",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "description": "Key for the asset. Used in the assets endpoint.",
                  "type": "string"
                },
                "fit": {
                  "description": "Whether to crop the thumbnail to match the size, or maintain the aspect ratio.",
                  "type": "string",
                  "enum": [
                    "cover",
                    "contain",
                    "inside",
                    "outside"
                  ]
                },
                "width": {
                  "description": "Width of the thumbnail.",
                  "type": "integer"
                },
                "height": {
                  "description": "Height of the thumbnail.",
                  "type": "integer"
                },
                "withoutEnlargement": {
                  "description": "No image upscale",
                  "type": "boolean"
                },
                "quality": {
                  "description": "Quality of the compression used.",
                  "type": "integer"
                },
                "format": {
                  "description": "Reformat output image",
                  "type": "string",
                  "enum": [
                    "",
                    "jpeg",
                    "png",
                    "webp",
                    "tiff",
                    "avif"
                  ]
                },
                "transforms": {
                  "description": "Additional transformations to apply",
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "method": {
                        "description": "The Sharp method name",
                        "type": "string"
                      },
                      "arguments": {
                        "description": "A list of arguments to pass to the Sharp method",
                        "type": "array",
                        "nullable": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "argument": {
                              "description": "A JSON representation of the argument value",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": null,
            "nullable": true
          },
          "custom_css": {
            "nullable": true,
            "type": "string"
          },
          "storage_default_folder": {
            "description": "Default folder to place files",
            "type": "string",
            "format": "uuid"
          },
          "basemaps": {
            "nullable": true
          },
          "mapbox_key": {
            "nullable": true,
            "type": "string"
          },
          "module_bar": {
            "nullable": true
          },
          "project_descriptor": {
            "nullable": true,
            "type": "string"
          },
          "default_language": {
            "nullable": false,
            "type": "string"
          },
          "custom_aspect_ratios": {
            "nullable": true
          },
          "public_favicon": {
            "nullable": true,
            "description": "$t:field_options.directus_settings.project_favicon_note",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ]
          },
          "default_appearance": {
            "nullable": false,
            "type": "string"
          },
          "default_theme_light": {
            "nullable": true,
            "type": "string"
          },
          "theme_light_overrides": {
            "nullable": true
          },
          "default_theme_dark": {
            "nullable": true,
            "type": "string"
          },
          "theme_dark_overrides": {
            "nullable": true
          },
          "report_error_url": {
            "nullable": true,
            "type": "string"
          },
          "report_bug_url": {
            "nullable": true,
            "type": "string"
          },
          "report_feature_url": {
            "nullable": true,
            "type": "string"
          },
          "public_registration": {
            "nullable": false,
            "description": "$t:fields.directus_settings.public_registration_note",
            "type": "boolean"
          },
          "public_registration_verify_email": {
            "nullable": false,
            "description": "$t:fields.directus_settings.public_registration_verify_email_note",
            "type": "boolean"
          },
          "public_registration_role": {
            "nullable": true,
            "description": "$t:fields.directus_settings.public_registration_role_note",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Roles"
              }
            ]
          },
          "public_registration_email_filter": {
            "nullable": true,
            "description": "$t:fields.directus_settings.public_registration_email_filter_note"
          },
          "visual_editor_urls": {
            "nullable": true
          }
        },
        "x-collection": "directus_settings"
      },
      "Permissions": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the permission.",
            "example": 1,
            "type": "integer"
          },
          "collection": {
            "description": "What collection this permission applies to.",
            "example": "customers",
            "type": "string"
          },
          "action": {
            "description": "What action this permission applies to.",
            "example": "create",
            "type": "string",
            "enum": [
              "create",
              "read",
              "update",
              "delete"
            ]
          },
          "permissions": {
            "description": "JSON structure containing the permissions checks for this permission.",
            "type": "object",
            "nullable": true
          },
          "validation": {
            "description": "JSON structure containing the validation checks for this permission.",
            "type": "object",
            "nullable": true
          },
          "presets": {
            "description": "JSON structure containing the preset value for created/updated items.",
            "type": "object",
            "nullable": true
          },
          "fields": {
            "description": "CSV of fields that the user is allowed to interact with.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "policy": {
            "nullable": false
          }
        },
        "x-collection": "directus_permissions"
      },
      "Relations": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the relation.",
            "example": 1,
            "type": "integer"
          },
          "many_collection": {
            "description": "Collection that has the field that holds the foreign key.",
            "example": "directus_activity",
            "type": "string"
          },
          "many_field": {
            "description": "Foreign key. Field that holds the primary key of the related collection.",
            "example": "user",
            "type": "string"
          },
          "one_collection": {
            "description": "Collection on the _one_ side of the relationship.",
            "example": "directus_users",
            "type": "string"
          },
          "one_field": {
            "description": "Alias column that serves as the _one_ side of the relationship.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "one_collection_field": {
            "nullable": true,
            "type": "string"
          },
          "one_allowed_collections": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "junction_field": {
            "description": "Field on the junction table that holds the many field of the related relation.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "sort_field": {
            "nullable": true,
            "type": "string"
          },
          "one_deselect_action": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "directus_relations"
      },
      "Presets": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for this single collection preset.",
            "example": 155,
            "type": "integer"
          },
          "bookmark": {
            "description": "Name for the bookmark. If this is set, the preset will be considered a bookmark.",
            "nullable": true,
            "type": "string"
          },
          "user": {
            "description": "The unique identifier of the user to whom this collection preset applies.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "role": {
            "description": "The unique identifier of a role in the platform. If `user` is null, this will be used to apply the collection preset or bookmark for all users in the role.",
            "example": "50419801-0f30-8644-2b3c-9bc2d980d0a0",
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Roles"
              }
            ]
          },
          "collection": {
            "description": "What collection this collection preset is used for.",
            "example": "articles",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "search": {
            "description": "Search query.",
            "type": "string",
            "nullable": true
          },
          "layout": {
            "description": "Key of the layout that is used.",
            "type": "string",
            "example": null
          },
          "layout_query": {
            "description": "Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.",
            "example": {
              "cards": {
                "sort": "-published_on"
              }
            },
            "nullable": true
          },
          "layout_options": {
            "description": "Options of the views. The properties in here are controlled by the layout.",
            "example": {
              "cards": {
                "icon": "account_circle",
                "title": "{{ last_name }}{{ first_name }}",
                "subtitle": "{{ title }}",
                "size": 3
              }
            },
            "nullable": true
          },
          "refresh_interval": {
            "nullable": true,
            "type": "integer"
          },
          "filter": {
            "nullable": true
          },
          "icon": {
            "nullable": true,
            "type": "string"
          },
          "color": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "directus_presets"
      },
      "Flows": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the flow.",
            "type": "string",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426"
          },
          "name": {
            "description": "The name of the flow.",
            "type": "string",
            "example": "Update Articles Flow"
          },
          "icon": {
            "description": "Icon displayed in the Admin App for the flow.",
            "type": "string",
            "example": "bolt"
          },
          "color": {
            "description": "Color of the icon displayed in the Admin App for the flow.",
            "type": "string",
            "example": "#112233",
            "nullable": true
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "description": "Current status of the flow.",
            "type": "string",
            "example": "active",
            "default": "active",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "trigger": {
            "description": "Type of trigger for the flow. One of `hook`, `webhook`, `operation`, `schedule`, `manual`.",
            "type": "string",
            "example": "manual"
          },
          "accountability": {
            "description": "The permission used during the flow. One of `$public`, `$trigger`, `$full`, or UUID of a role.",
            "type": "string",
            "example": "$trigger"
          },
          "options": {
            "description": "Options of the selected trigger for the flow.",
            "type": "object",
            "example": null,
            "nullable": true
          },
          "operation": {
            "description": "UUID of the operation connected to the trigger in the flow.",
            "example": "92e82998-e421-412f-a513-13701e83e4ce",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Operations"
              }
            ]
          },
          "date_created": {
            "description": "Timestamp in ISO8601 when the flow was created.",
            "type": "string",
            "example": "2022-05-11T13:14:52Z",
            "format": "date-time",
            "nullable": true
          },
          "user_created": {
            "description": "The user who created the flow.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "operations": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/Operations"
                }
              ]
            }
          }
        },
        "x-collection": "directus_flows"
      },
      "Operations": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the operation.",
            "type": "string",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426"
          },
          "name": {
            "description": "The name of the operation.",
            "type": "string",
            "example": "Log to Console"
          },
          "key": {
            "description": "Key for the operation. Must be unique within a given flow.",
            "type": "string",
            "example": "log_console"
          },
          "type": {
            "description": "Type of operation. One of `log`, `mail`, `notification`, `create`, `read`, `request`, `sleep`, `transform`, `trigger`, `condition`, or any type of custom operation extensions.",
            "type": "string",
            "example": "log"
          },
          "position_x": {
            "description": "Position of the operation on the X axis within the flow workspace.",
            "type": "integer",
            "example": 12
          },
          "position_y": {
            "description": "Position of the operation on the Y axis within the flow workspace.",
            "type": "integer",
            "example": 12
          },
          "options": {
            "description": "Options depending on the type of the operation.",
            "type": "object",
            "example": null,
            "nullable": true
          },
          "resolve": {
            "description": "The operation triggered when the current operation succeeds (or `then` logic of a condition operation).",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Operations"
              }
            ]
          },
          "reject": {
            "description": "The operation triggered when the current operation fails (or `otherwise` logic of a condition operation).",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Operations"
              }
            ]
          },
          "flow": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Flows"
              }
            ]
          },
          "date_created": {
            "description": "Timestamp in ISO8601 when the operation was created.",
            "type": "string",
            "example": "2022-05-11T13:14:52Z",
            "format": "date-time",
            "nullable": true
          },
          "user_created": {
            "description": "The user who created the operation.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "directus_operations"
      },
      "Collections": {
        "type": "object",
        "properties": {
          "collection": {
            "description": "The collection key.",
            "example": "customers",
            "type": "string"
          },
          "icon": {
            "nullable": true,
            "type": "string"
          },
          "note": {
            "nullable": true,
            "type": "string"
          },
          "display_template": {
            "nullable": true,
            "type": "string"
          },
          "hidden": {
            "nullable": false,
            "type": "boolean"
          },
          "singleton": {
            "nullable": false,
            "type": "boolean"
          },
          "translations": {
            "nullable": true
          },
          "archive_field": {
            "nullable": true,
            "type": "string"
          },
          "archive_app_filter": {
            "nullable": false,
            "type": "boolean"
          },
          "archive_value": {
            "nullable": true,
            "type": "string"
          },
          "unarchive_value": {
            "nullable": true,
            "type": "string"
          },
          "sort_field": {
            "nullable": true,
            "type": "string"
          },
          "accountability": {
            "nullable": true,
            "type": "string"
          },
          "color": {
            "nullable": true,
            "type": "string"
          },
          "item_duplication_fields": {
            "nullable": true
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "group": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "collapse": {
            "nullable": false,
            "type": "string"
          },
          "preview_url": {
            "nullable": true,
            "type": "string"
          },
          "versioning": {
            "nullable": false,
            "type": "boolean"
          }
        },
        "x-collection": "directus_collections"
      },
      "ItemsPaperPrototypes": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "course": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCourses"
              }
            ]
          },
          "total_question_count": {
            "nullable": true,
            "type": "integer"
          },
          "total_point_value": {
            "nullable": true,
            "description": "Ctrl+S保存后更新。",
            "type": "number"
          },
          "paper_prototype_chapters": {
            "nullable": true,
            "description": "一个章节代表了一组题目以及对应的一套分值策略。",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsPaperPrototypeChapters"
                }
              ]
            }
          }
        },
        "x-collection": "paper_prototypes",
        "required": [
          "id"
        ]
      },
      "Extensions": {
        "type": "object",
        "properties": {
          "enabled": {
            "nullable": false,
            "type": "boolean"
          },
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "folder": {
            "nullable": false,
            "type": "string"
          },
          "source": {
            "nullable": false,
            "type": "string"
          },
          "bundle": {
            "description": "Name of the bundle the extension is in.",
            "example": "directus-extension-my-bundle",
            "type": "string",
            "nullable": true
          }
        },
        "x-collection": "directus_extensions"
      },
      "Webhooks": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The index of the webhook.",
            "type": "integer",
            "example": 1
          },
          "name": {
            "description": "The name of the webhook.",
            "type": "string",
            "example": "create articles"
          },
          "method": {
            "description": "Method used in the webhook.",
            "type": "string",
            "example": "POST"
          },
          "url": {
            "description": "The url of the webhook.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "status": {
            "description": "The status of the webhook.",
            "type": "string",
            "example": "inactive"
          },
          "data": {
            "description": "If yes, send the content of what was done",
            "type": "boolean",
            "example": true
          },
          "actions": {
            "description": "The actions that triggers this webhook.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": null,
            "nullable": true
          },
          "collections": {
            "nullable": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "headers": {
            "nullable": true
          },
          "was_active_before_deprecation": {
            "nullable": false,
            "type": "boolean"
          },
          "migrated_flow": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Flows"
              }
            ]
          }
        },
        "x-collection": "directus_webhooks"
      },
      "Comments": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for this single collection preset.",
            "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28",
            "type": "string"
          },
          "collection": {
            "description": "The collection of the item the Comment is created for.",
            "example": "articles",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "item": {
            "description": "The item the Comment is created for.",
            "example": "123",
            "type": "string"
          },
          "comment": {
            "description": "User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app.",
            "example": "This is a comment",
            "type": "string"
          },
          "date_created": {
            "description": "When the Comment was created.",
            "type": "string",
            "example": "2024-01-23T12:34:56Z",
            "format": "date-time",
            "nullable": true
          },
          "date_updated": {
            "description": "When the Comment was updated.",
            "type": "string",
            "example": "2024-01-23T12:34:56Z",
            "format": "date-time",
            "nullable": true
          },
          "user_created": {
            "description": "User that created the Comment.",
            "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "description": "User that updated the Comment.",
            "example": "81dfa7e0-56d2-471f-b96a-1cf8a62bdf28",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "directus_comments"
      },
      "Versions": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Primary key of the Content Version.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "type": "string"
          },
          "key": {
            "description": "Key of the Content Version, used as the value for the \"version\" query parameter.",
            "example": "draft",
            "type": "string"
          },
          "name": {
            "description": "Descriptive name of the Content Version.",
            "example": "My Draft",
            "type": "string"
          },
          "collection": {
            "description": "Name of the collection the Content Version is created on.",
            "example": "articles",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "item": {
            "description": "The item the Content Version is created on.",
            "example": "168",
            "type": "string"
          },
          "hash": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "description": "When the Content Version was created.",
            "type": "string",
            "example": "2022-05-11T13:14:52Z",
            "format": "date-time",
            "nullable": true
          },
          "date_updated": {
            "description": "When the Content Version was last updated.",
            "type": "string",
            "example": "2022-05-11T13:14:53Z",
            "format": "date-time",
            "nullable": true
          },
          "user_created": {
            "description": "User that created the Content Version.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "user_updated": {
            "description": "User that last updated the Content Version.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "delta": {
            "description": "The current changes compared to the main version of the item.",
            "example": {
              "my_field": "Updated Value"
            },
            "type": "object"
          }
        },
        "x-collection": "directus_versions"
      },
      "ItemsCourses": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "subject": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsSubjects"
              }
            ]
          },
          "teachers": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsCoursesTeachers"
                }
              ]
            }
          }
        },
        "x-collection": "courses",
        "required": [
          "id"
        ]
      },
      "ItemsClasses": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "institution": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsInstitutions"
              }
            ]
          },
          "students": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsStudents"
                }
              ]
            }
          }
        },
        "x-collection": "classes",
        "required": [
          "id"
        ]
      },
      "ItemsInstitutions": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "institutions",
        "required": [
          "id"
        ]
      },
      "ItemsPaperGenStrategies": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "is_template": {
            "nullable": true,
            "description": "模板组卷策略，系统预设组卷策略，可供用户（主要是学生）直接套用，在其基础上修改然后组卷。",
            "type": "boolean"
          },
          "paper_gen_strategy_chapters": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsPaperGenStrategyChapters"
                }
              ]
            }
          }
        },
        "x-collection": "paper_gen_strategies",
        "required": [
          "id"
        ]
      },
      "ItemsExams": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": false,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "paper_prototype": {
            "nullable": true,
            "description": "以后可以设为可用组卷策略，但是现在试卷原型是必填项。",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperPrototypes"
              }
            ]
          },
          "start_time": {
            "nullable": false,
            "type": "string",
            "format": "timestamp"
          },
          "end_time": {
            "nullable": false,
            "type": "string",
            "format": "timestamp"
          },
          "duration": {
            "nullable": false,
            "description": "单位：分钟",
            "type": "integer"
          },
          "students": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsExamsStudents"
                }
              ]
            }
          }
        },
        "x-collection": "exams",
        "required": [
          "id",
          "title",
          "start_time",
          "end_time"
        ]
      },
      "ItemsKnowledgePoints": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          },
          "parent_node": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsKnowledgePoints"
              }
            ]
          },
          "subject": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsSubjects"
              }
            ]
          },
          "child_nodes": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsKnowledgePoints"
                }
              ]
            }
          },
          "parent_nodes": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsKnowledgePointsKnowledgePoints"
                }
              ]
            }
          }
        },
        "x-collection": "knowledge_points",
        "required": [
          "id"
        ]
      },
      "ItemsTeachers": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "name": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "teachers",
        "required": [
          "id"
        ]
      },
      "ItemsStudents": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "number": {
            "nullable": true,
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "email": {
            "nullable": false,
            "type": "string"
          },
          "password": {
            "nullable": true,
            "type": "string"
          },
          "class": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsClasses"
              }
            ]
          },
          "directus_user": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          }
        },
        "x-collection": "students",
        "required": [
          "id",
          "email"
        ]
      },
      "ItemsArticlesKnowledgePoints": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "articles_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsArticles"
              }
            ]
          },
          "knowledge_points_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsKnowledgePoints"
              }
            ]
          }
        },
        "x-collection": "articles_knowledge_points"
      },
      "ItemsKnowledgePointsKnowledgePoints": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "knowledge_points_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsKnowledgePoints"
              }
            ]
          },
          "related_knowledge_points_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsKnowledgePoints"
              }
            ]
          }
        },
        "x-collection": "knowledge_points_knowledge_points"
      },
      "ItemsNotices": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "content": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "notices",
        "required": [
          "id"
        ]
      },
      "ItemsQuestionPointAssignStrategies": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "question_type": {
            "nullable": true,
            "type": "string"
          },
          "question_difficulty": {
            "nullable": true,
            "type": "integer"
          },
          "question_point_value": {
            "nullable": true,
            "type": "number"
          },
          "paper_gen_strategy_chapter": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperGenStrategyChapters"
              }
            ]
          },
          "paper_prototype_chapter": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperPrototypeChapters"
              }
            ]
          }
        },
        "x-collection": "question_point_assign_strategies",
        "required": [
          "id"
        ]
      },
      "ItemsQuestionsSections": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "questions_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestions"
              }
            ]
          },
          "sections_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsSections"
              }
            ]
          }
        },
        "x-collection": "questions_sections"
      },
      "ItemsArticlesSections": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "articles_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsArticles"
              }
            ]
          },
          "sections_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsSections"
              }
            ]
          }
        },
        "x-collection": "articles_sections"
      },
      "ItemsPaperGenStrategyItems": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "paper_gen_strategy_chapter": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperGenStrategyChapters"
              }
            ]
          },
          "knowledge_point": {
            "nullable": true,
            "description": "选择父节点时包括了其下所有子节点。为空时不限知识点。",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsKnowledgePoints"
              }
            ]
          },
          "question_type": {
            "nullable": true,
            "type": "string"
          },
          "question_num": {
            "nullable": true,
            "type": "integer"
          }
        },
        "x-collection": "paper_gen_strategy_items",
        "required": [
          "id"
        ]
      },
      "ItemsPaperPrototypeChapters": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "q_mc_single_point_value": {
            "nullable": true,
            "type": "number"
          },
          "total_question_count": {
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "q_mc_multi_point_value": {
            "nullable": true,
            "type": "number"
          },
          "total_point_value": {
            "nullable": true,
            "description": "此字段需要计算实际保存进章节的题目的属性，所以仅在保存时更新此字段。",
            "type": "integer"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "q_mc_multi_incomplete_point_value": {
            "nullable": true,
            "type": "number"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "q_mc_binary_point_value": {
            "nullable": true,
            "type": "number"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "q_mc_flexible_point_value": {
            "nullable": true,
            "type": "number"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "q_mc_flexible_incomplete_point_value": {
            "nullable": true,
            "type": "number"
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "sort_in_paper": {
            "nullable": true,
            "type": "integer"
          },
          "layout_mode": {
            "nullable": true,
            "description": "根据该字段，决定章节内是题组还是独立题目。",
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "paper_prototype": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperPrototypes"
              }
            ]
          },
          "questions": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestions"
                }
              ]
            }
          },
          "question_point_assign_strategies": {
            "nullable": true,
            "description": "较复杂，暂时不用",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsQuestionPointAssignStrategies"
                }
              ]
            }
          },
          "question_groups": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsPaperPrototypeChaptersQuestionGroups"
                }
              ]
            }
          }
        },
        "x-collection": "paper_prototype_chapters",
        "required": [
          "id"
        ]
      },
      "ItemsPaperPrototypeChaptersQuestions": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "paper_prototype_chapters_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperPrototypeChapters"
              }
            ]
          },
          "questions_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestions"
              }
            ]
          },
          "sort_in_chapter": {
            "nullable": true,
            "type": "integer"
          }
        },
        "x-collection": "paper_prototype_chapters_questions"
      },
      "ItemsQuestionsKnowledgePoints": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "questions_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestions"
              }
            ]
          },
          "knowledge_points_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsKnowledgePoints"
              }
            ]
          }
        },
        "x-collection": "questions_knowledge_points"
      },
      "ItemsSectionsKnowledgePoints": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "sections_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsSections"
              }
            ]
          },
          "knowledge_points_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsKnowledgePoints"
              }
            ]
          }
        },
        "x-collection": "sections_knowledge_points"
      },
      "ItemsPaperGenStrategyChapters": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "paper_gen_strategy": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperGenStrategies"
              }
            ]
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "paper_gen_strategy_items": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsPaperGenStrategyItems"
                }
              ]
            }
          },
          "question_point_assign_strategies": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsQuestionPointAssignStrategies"
                }
              ]
            }
          }
        },
        "x-collection": "paper_gen_strategy_chapters",
        "required": [
          "id"
        ]
      },
      "ItemsSections": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "textbooks": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsTextbooks"
              }
            ]
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "section_number": {
            "nullable": true,
            "description": "仅供显示用",
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "level": {
            "nullable": true,
            "type": "integer"
          },
          "parent_node": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsSections"
              }
            ]
          },
          "child_nodes": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsSections"
                }
              ]
            }
          },
          "knowledge_points": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsSectionsKnowledgePoints"
                }
              ]
            }
          }
        },
        "x-collection": "sections",
        "required": [
          "id"
        ]
      },
      "ItemsPaperPrototypeChaptersQuestionGroups": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "paper_prototype_chapters_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperPrototypeChapters"
              }
            ]
          },
          "question_groups_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestionGroups"
              }
            ]
          }
        },
        "x-collection": "paper_prototype_chapters_question_groups"
      },
      "ItemsQuestions": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "review_status": {
            "nullable": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "type": {
            "nullable": false,
            "type": "string"
          },
          "difficulty": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "score": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "question_group": {
            "nullable": true,
            "description": "若不填则为普通独立题目",
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestionGroups"
              }
            ]
          },
          "sort_in_group": {
            "nullable": true,
            "type": "integer"
          },
          "q_mc_single": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsQMcSingle"
              }
            ]
          },
          "q_mc_multi": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsQMcMulti"
              }
            ]
          },
          "q_mc_binary": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsQMcBinary"
              }
            ]
          },
          "q_mc_flexible": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsQMcFlexible"
              }
            ]
          },
          "q_mc": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsQMc"
              }
            ]
          },
          "stem": {
            "nullable": true,
            "description": "新尝试，用computed字段自动获取",
            "type": "string"
          },
          "analysis": {
            "nullable": true,
            "description": "用computed字段自动获取",
            "type": "string"
          },
          "correct_ans_select_radio": {
            "nullable": true,
            "type": "string"
          },
          "correct_ans_select_multiple_checkbox": {
            "nullable": true
          },
          "knowledge_points": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsQuestionsKnowledgePoints"
                }
              ]
            }
          },
          "sections": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsQuestionsSections"
                }
              ]
            }
          }
        },
        "x-collection": "questions",
        "required": [
          "id",
          "type"
        ]
      },
      "ItemsSubmittedPapers": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "description": "submitted_paper标题继承自试卷原型或组卷策略。",
            "type": "string"
          },
          "source_type": {
            "nullable": true,
            "type": "string"
          },
          "source_paper_prototype": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperPrototypes"
              }
            ]
          },
          "source_paper_gen_strategies": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperGenStrategies"
              }
            ]
          },
          "submitted_exam": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsSubmittedExams"
              }
            ]
          },
          "point_value": {
            "nullable": true,
            "type": "number"
          },
          "score": {
            "nullable": true,
            "type": "number"
          },
          "submitted_paper_chapters": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsSubmittedPaperChapters"
                }
              ]
            }
          }
        },
        "x-collection": "submitted_papers",
        "required": [
          "id",
          "submitted_exam"
        ]
      },
      "ItemsExamsStudents": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "exams_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsExams"
              }
            ]
          },
          "students_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsStudents"
              }
            ]
          }
        },
        "x-collection": "exams_students"
      },
      "ItemsQuestionGroups": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "shared_stem": {
            "nullable": true,
            "description": "所有该题组下题目的共有题干",
            "type": "string"
          },
          "questions": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsQuestions"
                }
              ]
            }
          }
        },
        "x-collection": "question_groups",
        "required": [
          "id"
        ]
      },
      "ItemsSubjects": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "subjects",
        "required": [
          "id"
        ]
      },
      "ItemsQMcFlexible": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "option_a": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "option_b": {
            "nullable": true,
            "type": "string"
          },
          "option_number": {
            "nullable": true,
            "type": "integer"
          },
          "option_c": {
            "nullable": true,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "option_d": {
            "nullable": true,
            "type": "string"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "option_e": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "option_f": {
            "nullable": true,
            "type": "string"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "stem": {
            "nullable": true,
            "type": "string"
          },
          "correct_options": {
            "nullable": true
          },
          "analysis": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "q_mc_flexible",
        "required": [
          "id"
        ]
      },
      "ItemsQMc": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "option_a": {
            "nullable": false,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "option_b": {
            "nullable": true,
            "type": "string"
          },
          "option_c": {
            "nullable": true,
            "type": "string"
          },
          "mcq_type": {
            "nullable": true,
            "type": "string"
          },
          "option_number": {
            "nullable": true,
            "type": "integer"
          },
          "option_d": {
            "nullable": true,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "option_e": {
            "nullable": true,
            "type": "string"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "option_f": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "stem": {
            "nullable": false,
            "type": "string"
          },
          "correct_option": {
            "nullable": true,
            "type": "integer"
          },
          "correct_options": {
            "nullable": true
          }
        },
        "x-collection": "q_mc",
        "required": [
          "id",
          "option_a",
          "stem"
        ]
      },
      "ItemsQMcMulti": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "option_a": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "option_b": {
            "nullable": true,
            "type": "string"
          },
          "option_number": {
            "nullable": true,
            "type": "integer"
          },
          "option_c": {
            "nullable": true,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "option_d": {
            "nullable": true,
            "type": "string"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "option_e": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "option_f": {
            "nullable": true,
            "type": "string"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "stem": {
            "nullable": true,
            "type": "string"
          },
          "correct_options": {
            "nullable": true
          },
          "analysis": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "q_mc_multi",
        "required": [
          "id"
        ]
      },
      "ItemsQMcBinary": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "option_a": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "option_b": {
            "nullable": true,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "stem": {
            "nullable": true,
            "type": "string"
          },
          "correct_option": {
            "nullable": true,
            "type": "string"
          },
          "analysis": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "q_mc_binary",
        "required": [
          "id"
        ]
      },
      "ItemsSubmittedExams": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "exam": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsExams"
              }
            ]
          },
          "student": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsStudents"
              }
            ]
          },
          "participation_status": {
            "nullable": true,
            "description": "这个综合了login_status和submit_status。暂时不用。",
            "type": "string"
          },
          "submit_status": {
            "nullable": true,
            "type": "string"
          },
          "login_status": {
            "nullable": true,
            "type": "string"
          },
          "actual_start_time": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "actual_end_time": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "extra_time": {
            "nullable": true,
            "description": "指定延时的时长（单位：分钟）。",
            "type": "integer"
          },
          "expected_end_time": {
            "nullable": true,
            "description": "=实际开考时间+考试时长+延时时间",
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "duration": {
            "nullable": true,
            "type": "integer"
          },
          "submitted_papers": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsSubmittedPapers"
                }
              ]
            }
          }
        },
        "x-collection": "submitted_exams",
        "required": [
          "id",
          "exam"
        ]
      },
      "ItemsQuestionsSpreadsheet": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "task": {
            "nullable": true,
            "type": "string"
          },
          "handbook": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "questions_spreadsheet",
        "required": [
          "id"
        ]
      },
      "ItemsSubmittedQuestions": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "student": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsStudents"
              }
            ]
          },
          "question_type": {
            "nullable": true,
            "type": "string"
          },
          "question": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestions"
              }
            ]
          },
          "option_number": {
            "nullable": true,
            "description": "此字段仅供单选题、多选题、不定项选择题使用。",
            "type": "integer"
          },
          "sort_in_chapter": {
            "nullable": true,
            "type": "integer"
          },
          "submitted_paper_chapter": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsSubmittedPaperChapters"
              }
            ]
          },
          "submitted_ans_q_mc_single": {
            "nullable": true,
            "type": "string"
          },
          "submitted_ans_q_mc_multi": {
            "nullable": true
          },
          "submitted_ans_q_mc_binary": {
            "nullable": true,
            "type": "string"
          },
          "submitted_ans_q_mc_flexible": {
            "nullable": true
          },
          "correct_ans": {
            "nullable": true,
            "type": "string"
          },
          "point_value": {
            "nullable": true,
            "type": "number"
          },
          "incomplete_point_value": {
            "nullable": true,
            "type": "number"
          },
          "score": {
            "nullable": true,
            "type": "number"
          }
        },
        "x-collection": "submitted_questions",
        "required": [
          "id",
          "question",
          "submitted_paper_chapter"
        ]
      },
      "ItemsQSpreadsheetScoringItems": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "item_type": {
            "nullable": true,
            "type": "string"
          },
          "scoring_group": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsQSpreadsheetScoringGroups"
              }
            ]
          }
        },
        "x-collection": "q_spreadsheet_scoring_items",
        "required": [
          "id"
        ]
      },
      "ItemsTextbooks": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "author": {
            "nullable": true,
            "type": "string"
          },
          "course": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCourses"
              }
            ]
          },
          "version": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "textbooks",
        "required": [
          "id"
        ]
      },
      "ItemsArticles": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "textbook": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsTextbooks"
              }
            ]
          },
          "content": {
            "nullable": true,
            "type": "string"
          },
          "knowledge_points": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsArticlesKnowledgePoints"
                }
              ]
            }
          },
          "sections": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsArticlesSections"
                }
              ]
            }
          }
        },
        "x-collection": "articles",
        "required": [
          "id"
        ]
      },
      "ItemsQuestionsFillinBlank": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "stem": {
            "nullable": true,
            "type": "string"
          },
          "question_text": {
            "nullable": true,
            "type": "string"
          },
          "answers": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsQFillinBlankAnswers"
                }
              ]
            }
          }
        },
        "x-collection": "questions_fill_in_blank",
        "required": [
          "id"
        ]
      },
      "ItemsQFillinBlankAnswers": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "question_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestionsFillinBlank"
              }
            ]
          },
          "blank_position": {
            "nullable": true,
            "type": "integer"
          },
          "correct_answer": {
            "nullable": true,
            "type": "string"
          },
          "score": {
            "nullable": true,
            "type": "number",
            "format": "float"
          }
        },
        "x-collection": "q_fill_in_blank_answers",
        "required": [
          "id"
        ]
      },
      "ItemsQMcSingle": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "option_a": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "option_b": {
            "nullable": true,
            "type": "string"
          },
          "option_number": {
            "nullable": true,
            "type": "integer"
          },
          "option_c": {
            "nullable": true,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "option_d": {
            "nullable": true,
            "type": "string"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "option_e": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "option_f": {
            "nullable": true,
            "type": "string"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "stem": {
            "nullable": true,
            "type": "string"
          },
          "correct_option": {
            "nullable": true,
            "type": "string"
          },
          "analysis": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "q_mc_single",
        "required": [
          "id"
        ]
      },
      "ItemsQSpreadsheetScoringGroups": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "scoring_items": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsQSpreadsheetScoringItems"
                }
              ]
            }
          }
        },
        "x-collection": "q_spreadsheet_scoring_groups",
        "required": [
          "id"
        ]
      },
      "ItemsQuestionsFillinBlank1": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "stem": {
            "nullable": true,
            "type": "string"
          },
          "question_text": {
            "nullable": true,
            "type": "string"
          },
          "correct_answer": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "questions_fill_in_blank_1",
        "required": [
          "id"
        ]
      },
      "ItemsSubmittedPaperChapters": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "sort_in_paper": {
            "nullable": true,
            "type": "integer"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "source_paper_prototype_chapter": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperPrototypeChapters"
              }
            ]
          },
          "source_paper_gen_strategy_chapter": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperGenStrategyChapters"
              }
            ]
          },
          "submitted_paper": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsSubmittedPapers"
              }
            ]
          },
          "point_value": {
            "nullable": true,
            "type": "number"
          },
          "score": {
            "nullable": true,
            "description": "注意这里不能用计算字段，因为它是通过api更新的",
            "type": "string"
          },
          "submitted_questions": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsSubmittedQuestions"
                }
              ]
            }
          }
        },
        "x-collection": "submitted_paper_chapters",
        "required": [
          "id",
          "submitted_paper"
        ]
      },
      "ItemsPapers": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "course": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCourses"
              }
            ]
          },
          "total_question_count": {
            "nullable": true,
            "type": "integer"
          },
          "total_point_value": {
            "nullable": true,
            "description": "Ctrl+S保存后更新。",
            "type": "number"
          },
          "paper_strategy": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperStrategies"
              }
            ]
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "paper_sections": {
            "nullable": true,
            "description": "在这里新增试卷的节（如“一、单选题”）",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsPaperSections"
                }
              ]
            }
          }
        },
        "x-collection": "papers",
        "required": [
          "id"
        ]
      },
      "ItemsPracticeSessions": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "actual_start_time": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "actual_end_time": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "submit_status": {
            "nullable": true,
            "type": "string"
          },
          "extra_time": {
            "nullable": true,
            "description": "指定延时的时长（单位：分钟）。",
            "type": "integer"
          },
          "score": {
            "nullable": true,
            "type": "number"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "paper": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPapers"
              }
            ]
          },
          "exercises_students_id": {
            "nullable": true,
            "description": "一个exercises_students项可以有多个对应练习记录（多次练习）",
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsExercisesStudents"
              }
            ]
          },
          "question_results": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsQuestionResults"
                }
              ]
            }
          }
        },
        "x-collection": "practice_sessions",
        "required": [
          "id"
        ]
      },
      "ItemsPaperSectionStrategies": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "question_type": {
            "nullable": false,
            "type": "string"
          },
          "sort_in_paper": {
            "nullable": true,
            "type": "integer"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "paper_strategy": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperStrategies"
              }
            ]
          },
          "points_per_question": {
            "nullable": true,
            "type": "number"
          },
          "total_question_points": {
            "nullable": true,
            "type": "number"
          },
          "total_question_count": {
            "nullable": true,
            "type": "integer"
          },
          "target_difficulty": {
            "nullable": false,
            "type": "integer"
          },
          "filter_type": {
            "nullable": true,
            "type": "string"
          },
          "filter_textbook_chapters": {
            "nullable": true
          },
          "filter_knowledge_points": {
            "nullable": true
          }
        },
        "x-collection": "paper_section_strategies",
        "required": [
          "id",
          "question_type"
        ]
      },
      "ItemsExercisesStudents": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "exercises_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsExercises"
              }
            ]
          },
          "students_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsStudents"
              }
            ]
          }
        },
        "x-collection": "exercises_students"
      },
      "ItemsPaperSections": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "question_type": {
            "nullable": false,
            "type": "string"
          },
          "paper_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPapers"
              }
            ]
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "total_question_count": {
            "nullable": true,
            "type": "integer"
          },
          "points_per_question": {
            "nullable": true,
            "type": "number"
          },
          "total_question_points": {
            "nullable": true,
            "description": "这个计算字段不能开只读！开了就没法动态计算了",
            "type": "number"
          },
          "sort_in_paper": {
            "nullable": true,
            "type": "integer"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "questions": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsPaperSectionsQuestions"
                }
              ]
            }
          }
        },
        "x-collection": "paper_sections",
        "required": [
          "id",
          "question_type"
        ]
      },
      "ItemsExercises": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": false,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "paper": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPapers"
              }
            ]
          },
          "start_time": {
            "nullable": false,
            "type": "string",
            "format": "timestamp"
          },
          "end_time": {
            "nullable": false,
            "type": "string",
            "format": "timestamp"
          },
          "duration": {
            "nullable": false,
            "description": "单位：分钟",
            "type": "integer"
          },
          "students": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/components/schemas/ItemsExercisesStudents"
                }
              ]
            }
          }
        },
        "x-collection": "exercises",
        "required": [
          "id",
          "title",
          "start_time",
          "end_time"
        ]
      },
      "ItemsPaperStrategies": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "difficulty": {
            "nullable": true,
            "type": "number",
            "format": "float"
          },
          "paper_section_strategies": {
            "nullable": true,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/ItemsPaperSectionStrategies"
                }
              ]
            }
          }
        },
        "x-collection": "paper_strategies",
        "required": [
          "id"
        ]
      },
      "ItemsPaperInstances": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "nullable": false,
            "type": "string"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          }
        },
        "x-collection": "paper_instances",
        "required": [
          "id"
        ]
      },
      "ItemsPaperSectionsQuestions": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "paper_sections_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperSections"
              }
            ]
          },
          "questions_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestions"
              }
            ]
          },
          "sort_in_section": {
            "nullable": true,
            "type": "integer"
          }
        },
        "x-collection": "paper_sections_questions"
      },
      "ItemsQuestionResults": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "user_created": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_created": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "user_updated": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "date_updated": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "question_in_paper_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsPaperSectionsQuestions"
              }
            ]
          },
          "practice_session_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsPracticeSessions"
              }
            ]
          },
          "question_type": {
            "nullable": true,
            "type": "string"
          },
          "point_value": {
            "nullable": true,
            "type": "number"
          },
          "score": {
            "nullable": true,
            "type": "number"
          },
          "option_number": {
            "nullable": true,
            "description": "此字段仅供单选题、多选题、不定项选择题使用。",
            "type": "integer"
          },
          "correct_ans_select_multiple_checkbox": {
            "nullable": true
          },
          "correct_ans_select_radio": {
            "nullable": true,
            "type": "string"
          },
          "submit_ans_select_multiple_checkbox": {
            "nullable": true
          },
          "submit_ans_select_radio": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "question_results",
        "required": [
          "id"
        ]
      },
      "ItemsCoursesTeachers": {
        "type": "object",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "courses_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsCourses"
              }
            ]
          },
          "teachers_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsTeachers"
              }
            ]
          }
        },
        "x-collection": "courses_teachers"
      }
    },
    "parameters": {
      "Id": {
        "description": "Index",
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "UUId": {
        "description": "Unique identifier for the object.",
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "example": "8cbb43fe-4cdf-4991-8352-c461779cec02",
          "type": "string"
        }
      },
      "Collection": {
        "description": "Collection of which you want to retrieve the items from.",
        "name": "collection",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Search": {
        "description": "Filter by items that contain the given search query in one of their fields.",
        "in": "query",
        "name": "search",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Page": {
        "description": "Cursor for use in pagination. Often used in combination with limit.",
        "in": "query",
        "name": "page",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "Offset": {
        "description": "How many items to skip when fetching data.",
        "in": "query",
        "name": "offset",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "Sort": {
        "description": "How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.\n",
        "in": "query",
        "name": "sort",
        "required": false,
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "Meta": {
        "description": "What metadata to return in the response.",
        "in": "query",
        "name": "meta",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Limit": {
        "description": "A limit on the number of objects that are returned.",
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "Filter": {
        "description": "Select items in collection by given conditions.",
        "in": "query",
        "name": "filter",
        "required": false,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "example": {
                "<field>": {
                  "<operator>": "<value>"
                }
              }
            }
          }
        }
      },
      "Fields": {
        "description": "Control what fields are being returned in the object.",
        "in": "query",
        "name": "fields",
        "required": false,
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "Export": {
        "name": "export",
        "description": "Saves the API response to a file. Accepts one of \"csv\", \"json\", \"xml\", \"yaml\".",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "csv",
            "json",
            "xml",
            "yaml"
          ]
        }
      },
      "Version": {
        "name": "version",
        "description": "Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "NotFoundError": {
        "description": "Error: Not found.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Error: Unauthorized request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "KeyAuth": {
        "type": "apiKey",
        "in": "query",
        "name": "access_token"
      },
      "Auth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  }
}