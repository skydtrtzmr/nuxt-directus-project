# 执行： docker compose -p directus-client up -d
# 上述命令意思为：项目命名为directus-client，启动容器并后台运行

# 项目默认名称是项目所在文件夹的名称。

# 每次执行，都会重新读取.env文件中的环境变量，并覆盖原有值。
# 但是请注意，nuxt项目的生产环境不会随便受到.env文件中环境变量的影响。
# 只有前缀为NUXT_的环境变量才会被nuxt项目使用。

# docker compose up的时候，如果设置了env_file，则会自动读取.env文件中的环境变量。

# 参考：https://nuxtjs.org.cn/docs/guide/directory-structure/env

# 如果更新了镜像，但是之前已经运行过容器，则需要先删除容器，再重新运行容器。
# （docker compose down && docker compose up -d）

services:

  directus-client:
    image: skydtrtzmr/my-directus-client:latest
    ports:
      - 3201:3000
    env_file:
      - .env.production
  # redis-container:
  #   image: redis:6
  #   ports:
  #     - 6279:6379


# [2025-05-19] 最新版已经把nuxt的redis去掉了，融合到directus中，直接使用directus的redis。
# 这样的好处是:
# 1. 减少容器数量，简化管理。
# 2. 减少资源占用，提高性能。
# 3. 减少配置，简化管理。
# 4. 减少维护成本，提高开发效率。



