# 配置完成后，运行以下命令进行构建镜像：
# docker build -t my-directus-client ./

# 其实有两种方式构建镜像：
# 1. 直接在Dockerfile中指定依赖，然后使用RUN命令安装依赖，最后使用COPY命令复制代码，最后使用CMD命令启动服务。
# 2. 先使用RUN命令安装依赖，然后使用COPY命令复制代码，最后使用CMD命令启动服务。

FROM node:18-alpine AS builder

# 安装python3，用于安装node-sass依赖
# ARG TARGETPLATFORM

# 注意CRLF和LF的区别，这边多行命令如果用CRLF会导致docker build失败，必须用LF。
# 因为在dos/window下按一次回车键实际上输入的是“回车（CR)”和“换行（LF）”，
# 而Linux/unix下按一次回车键只输入“换行（LF）”，
# 所以本地修改的sh文件在CentOS上运行每行都会多了一个CR，因此就会报错syntax error: unexpected end of file。
# 因此本文件必须是LF格式，而不能是CRLF格式。
# RUN <<EOF
#   if [ "$TARGETPLATFORM" = 'linux/arm64' ]; then
#   	apk --no-cache add python3 build-base
#   	ln -sf /usr/bin/python3 /usr/bin/python
#   fi
# EOF

# CAUTION: 注意！加上ENV=production后会导致devDependencies的module不会安装。
# 所以如果你是打算在Dockerfile中安装devDependencies，请不要加上ENV=production，或者安装时加上`--include=dev`参数。`。
ENV NODE_ENV=production
ENV HOST 0.0.0.0

# 指定App根目录（作为之后的变量使用）
ENV APP_ROOT ./nuxt-app

RUN mkdir -p ${APP_ROOT}
# COPY . ${APP_ROOT}
WORKDIR ${APP_ROOT}
EXPOSE 3000
#If the environment in China build please open the following comments
#如果在中国环境下构建请把下面注释打开
# RUN npm config set registry https://registry.npmmirror.com


# 安装node-gyp依赖，否则install时会报错.
RUN apk update && apk upgrade && apk add gcc musl-dev g++ make python3 && ln -sf /usr/bin/python3 /usr/bin/python
# 安装 pnpm
RUN npm install -g pnpm
RUN pnpm config set registry https://registry.npmmirror.com

# 先把package.json和pnpm-lock.yaml复制到镜像中，用来安装依赖
COPY package.json pnpm-lock.yaml ./

RUN pnpm install --include=dev

# 安装完之后再把其他文件复制过去，可以加快构建速度
COPY ./assets ./assets
COPY ./composables ./composables
COPY ./components ./components
COPY ./layouts ./layouts
COPY ./middleware ./middleware
COPY ./pages ./pages
COPY ./public ./public
COPY ./server ./server
COPY ./service ./service
COPY ./stores ./stores
COPY ./types ./types
COPY .env .env
COPY app.vue  app.vue
COPY custom.d.ts  custom.d.ts
COPY error.vue  error.vue
COPY nuxt.config.ts  nuxt.config.ts
COPY README.md  README.md
COPY tailwind.config.js  tailwind.config.js
COPY tsconfig.json  tsconfig.json
# 注意，COPY会覆盖文件夹，所以不要直接把所有文件都复制过去，可以只复制需要的文件
# 注意此时docker中的路径已经在Workdir中，所以不要指定路径

RUN pnpm run build

# 执行测试脚本：
# RUN pnpm run build:test

CMD ["pnpm", "preview"]
