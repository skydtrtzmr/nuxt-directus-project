# TODO 修改中，现在有bug。

# 配置完成后，运行以下命令进行构建镜像：
# docker build -t my-directus-client ./

# 其实有两种方式构建镜像：
# 1. 直接在Dockerfile中指定依赖，然后使用RUN命令安装依赖，最后使用COPY命令复制代码，最后使用CMD命令启动服务。
# 2. 先使用RUN命令安装依赖，然后使用COPY命令复制代码，最后使用CMD命令启动服务。


####################################################################################################

# Stage 1: Build the application
FROM node:22-alpine AS builder

# 设置 Node.js 运行环境为生产模式
ENV NODE_ENV=production

# 设置工作目录
WORKDIR /app

# (可选) 如果在国内环境构建，可以设置 npm 镜像源以加速
RUN npm config set registry https://registry.npmmirror.com

# 安装 pnpm
# 使用 corepack (Node.js >= 16.9.0 自带) 来管理 pnpm 版本
RUN corepack enable && corepack prepare pnpm@latest --activate

# 复制 package.json 和 pnpm-lock.yaml
COPY package.json pnpm-lock.yaml ./

# 安装依赖
# pnpm fetch 会将依赖下载到内容寻址的存储中，pnpm install --offline 则从该存储中安装
RUN pnpm fetch
RUN pnpm install --frozen-lockfile --offline 
# offline 和 frozen-lockfile 是配合 pnpm fetch 使用的。

# 复制项目其余文件
# .dockerignore 文件会确保不必要的本地文件（如 node_modules, .git）不会被复制进来
COPY . .

# 执行构建命令
RUN pnpm build

# Stage 2: Create the runtime image
FROM node:22-alpine AS runtime

# 设置 Node.js 运行环境为生产模式
ENV NODE_ENV=production
# 设置应用运行的 HOST 和 PORT
ENV HOST=0.0.0.0
ENV PORT=3000

# 设置工作目录
WORKDIR /app

# (可选) 如果在国内环境，并且 pm2 的安装需要，可以设置 npm 镜像源
RUN npm config set registry https://registry.npmmirror.com

# 从构建阶段复制构建产物 (.output 目录)
COPY --from=builder /app/.output ./.output/

# 复制 package.json 和 pm2 配置文件
# package.json 可能包含 pm2 运行所需的脚本或元数据
COPY package.json ecosystem.config.cjs ./

# 全局安装 pm2
RUN npm install pm2 -g

# 暴露应用端口
EXPOSE ${PORT}

# 启动应用的命令
CMD ["pm2-runtime", "start", "ecosystem.config.cjs"]

####################################################################################################

# 执行测试脚本：
# RUN pnpm run build:test
