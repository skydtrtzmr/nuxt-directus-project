# TODO 修改中，现在有bug。

# 配置完成后，运行以下命令进行构建镜像：
# docker build -t my-directus-client ./

# 其实有两种方式构建镜像：
# 1. 直接在Dockerfile中指定依赖，然后使用RUN命令安装依赖，最后使用COPY命令复制代码，最后使用CMD命令启动服务。
# 2. 先使用RUN命令安装依赖，然后使用COPY命令复制代码，最后使用CMD命令启动服务。


####################################################################################################

# Stage1: 安装依赖
FROM node:18-alpine AS builder
ENV NODE_ENV=production
ENV HOST 0.0.0.0

WORKDIR /nuxt-app

COPY package.json .

# 使用corepack enable替代npm i -g pnpm
RUN corepack enable && corepack prepare
# Corepack 是 Node.js 的一个工具，用来管理包管理器（如 npm、yarn 和 pnpm）的版本。它实际上是 Node.js 的一部分，可以确保使用正确的包管理器版本。
# corepack enable：启用 Corepack 工具。通过这个命令，Node.js 将会激活 Corepack，允许使用指定的包管理器（如 pnpm、yarn 等）。它是 Node.js 16.9 版本引入的功能。
# corepack prepare：准备并确保 Corepack 所管理的包管理器（如 pnpm）是正确的版本。这个命令会下载和缓存包管理器，确保其在执行时已准备好。

# Deploy as 'node' user to match pnpm setups in production image
# (see https://github.com/directus/directus/issues/23822)
RUN chown node:node .
USER node

# 使用淘宝镜像源加速依赖下载
RUN pnpm config set registry https://registry.npmmirror.com
COPY pnpm-lock.yaml .

RUN pnpm fetch
# 下载依赖，并缓存到.pnpm-store文件夹中，以加快后续安装速度。

# 把代码复制到镜像中
COPY --chown=node:node . .

# 仅从.pnpm-store文件夹中安装依赖，不从网络下载依赖。
RUN pnpm install --frozen-lockfile --offline
RUN pnpm run build


# 执行测试脚本：
# RUN pnpm run build:test

####################################################################################################

# Stage2: 复制代码，构建项目

FROM node:18-alpine AS runtime

# 使用淘宝镜像源加速依赖下载
RUN npm config set registry https://registry.npmmirror.com

RUN npm install -g pnpm
# 注意这个要放在User node之前，否则会出现权限问题。

USER node

WORKDIR /nuxt-app

COPY --chown=node:node --from=builder /nuxt-app .
# 注意此时docker中的路径已经在Workdir中，所以不需要指定路径

EXPOSE 3000

CMD ["pnpm", "preview"]
